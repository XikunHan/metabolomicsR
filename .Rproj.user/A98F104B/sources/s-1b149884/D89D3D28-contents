---
title: "pkg_test"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```



# 1. metabolomics R
```{r}

.rs.restartR()

remove.packages("metabolomicsR")

.rs.restartR()

devtools::document()
devtools::install()
library(metabolomicsR)

devtools::check()


devtools::build_vignettes()
devtools::build_manual()
devtools::clean_vignettes()

usethis::use_vignette("metabolomicsR_intro")

# check package name 
available::available("metabolomicsR")
available::available("geneticToolBox",  browse= FALSE)




# previous namespace
exportPattern("^[[:alpha:]]+")
import(data.table)
importFrom(svMisc, progress)



# PCA
RFmarkerDetector

# single cell PCA


```


# release 
```{r}



devtools::check()


devtools::document()
devtools::install(build_vignettes = TRUE)
library(TippingPoint)




devtools::build()

devtools::spell_check()
devtools::check_rhub()



```



# 2. merge data and test
```{r}



library(metabolomicsR)


# 1) import sample annotation and injection order file ######

df_sample_clean <- fread("/n/holylfs05/LABS/liang_lab/Lab/xikun/AMD_metabolites/data/AMD_biomarker_data/df_plasma_sample.txt")
df_sample_clean


# injection order file

df_order_2016 <- readxl::read_excel("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/order/MEEI-01-16ML Data Tables_Run Order.xlsx", sheet = 1)
setDT(df_order_2016)
df_order_2016[, dataset := "2016"]
df_order_2016



df_order_2017 <- readxl::read_excel("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/order/MEEI-01-17ML+ Data Tables_Run Order.xlsx", sheet = 1)
setDT(df_order_2017)
df_order_2017[, dataset := "2017"]


df_order_2020 <- readxl::read_excel("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/order/MEEI-01-20PHML+ Data Tables_Run Order.xlsx", sheet = 1)
setDT(df_order_2020)
df_order_2020[, dataset := "2020"]


df_order_merge <- rbind(df_order_2016, df_order_2017, df_order_2020, fill = TRUE)
df_order_merge



if(0) {

# 2) data from metabolon #####

df_metabolon_QC_norm <- load_excel(path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-20PHML+/MEEI-02-20PHMISC_MERGED_CDT.XLSX", 
                 data_sheet = 9, 
                 feature_sheet = 3,
                 sample_sheet = 4)


df_metabolon_QC_norm <- QC_pipeline(df_metabolon_QC_norm, impute_method = NULL)
df_metabolon_QC_norm


df_metabolon_QC_norm <- update_Metabolite(df_metabolon_QC_norm, df_sample_clean, action = "add_sample_annotation")
df_metabolon_QC_norm




# updated injection order 
df_metabolon_QC_norm <- update_Metabolite(df_metabolon_QC_norm, df_order_merge, action = "injection_order")
df_metabolon_QC_norm


dd <- PCA(df_metabolon_QC_norm)

dd
p <- plot_PCA(dd,  color = "NEG", shape = "study")
p + labs(title = "metabolon_QC_norm")


p <- plot_PCA(dd,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_QC_norm") +
  facet_grid(~study)


p <- plot_UMAP(dd,  color = "NEG", shape = "study") 
p + labs(title = "metabolon_QC_norm")


p <- plot_UMAP(dd,  color = "NEG", shape = "ID_year") 
p + labs(title = "metabolon_QC_norm")


p <- plot_UMAP(dd,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_QC_norm") +
  facet_grid(~study)


dd_s <- update_Metabolite(dd, dataset = df_2020@sampleData$PARENT_SAMPLE_NAME, action = "remove_sample")
p <- plot_UMAP(dd_s,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_QC_norm") +
  facet_grid(~study)




p <- plot_tsne(dd,  color = "NEG", shape = "study") 
p + labs(title = "metabolon_QC_norm")


p <- plot_tsne(dd,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_QC_norm") +
  facet_grid(~study)


plot_Metabolite(dd, plot = "boxplot", feature_name = "X563") + facet_grid(~study)

plot_Metabolite(dd, plot = "boxplot", feature_name = "X563")

plot_Metabolite(dd, plot = "boxplot") + labs(title = "metabolon_QC_norm")


plot_injection_order(df_metabolon_QC_norm, feature_name = "X563", size = 1)
plot_injection_order(df_metabolon_QC_norm, shape = "study")


# separate for each data

dd_s <- update_Metabolite(df_metabolon_QC_norm, dataset = df_2016@sampleData$PARENT_SAMPLE_NAME, action = "keep_sample")
dd_s <- PCA(QC_pipeline(dd_s))
p <- plot_PCA(dd_s,  color = "NEG", shape = "study")
p + labs(title = "metabolon_QC_norm") +  facet_grid(~study)


dd_s <- update_Metabolite(df_metabolon_QC_norm, dataset = df_2017@sampleData$PARENT_SAMPLE_NAME, action = "keep_sample")
dd_s <- PCA(QC_pipeline(dd_s))
p <- plot_PCA(dd_s,  color = "NEG", shape = "study")
p + labs(title = "metabolon_QC_norm") +  facet_grid(~study)


dd_s <- update_Metabolite(df_metabolon_QC_norm, dataset = df_2020@sampleData$PARENT_SAMPLE_NAME, action = "keep_sample")
dd_s <- PCA(QC_pipeline(dd_s))
p <- plot_PCA(dd_s,  color = "NEG", shape = "study")
p + labs(title = "metabolon_QC_norm") +  facet_grid(~study)


  
  # UMAP
dd_s <- update_Metabolite(dd, dataset = df_2016@sampleData$PARENT_SAMPLE_NAME, action = "keep_sample")
p <- plot_UMAP(dd_s,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_QC_norm") +
  facet_grid(~study)

dd_s <- update_Metabolite(dd, dataset = df_2017@sampleData$PARENT_SAMPLE_NAME, action = "keep_sample")
p <- plot_UMAP(dd_s,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_QC_norm") +
  facet_grid(~study)


dd_s <- update_Metabolite(dd, dataset = df_2020@sampleData$PARENT_SAMPLE_NAME, action = "keep_sample")
p <- plot_UMAP(dd_s,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_QC_norm") +
  facet_grid(~study)




# 2.1) batch-norm ####

# rm(df_metabolon_QC_norm)

df_metabolon_batch_norm <- load_excel(path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-20PHML+/MEEI-02-20PHMISC_MERGED_CDT.XLSX", 
                 data_sheet = 6, 
                 feature_sheet = 3,
                 sample_sheet = 4)

  
df_metabolon_batch_norm

df_metabolon_batch_norm <- QC_pipeline(df_metabolon_batch_norm, impute_method = NULL)
df_metabolon_batch_norm


df_metabolon_batch_norm <- update_Metabolite(df_metabolon_batch_norm, df_sample_clean, action = "add_sample_annotation")
df_metabolon_batch_norm




# updated injection order 
df_metabolon_batch_norm <- update_Metabolite(df_metabolon_batch_norm, df_order_merge, action = "injection_order")
df_metabolon_batch_norm


dd <- PCA(df_metabolon_batch_norm)

dd
p <- plot_PCA(dd,  color = "NEG", shape = "study")
p + labs(title = "metabolon_batch_norm")


p <- plot_PCA(dd,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_batch_norm") +
  facet_grid(~study)


p <- plot_UMAP(dd,  color = "NEG", shape = "study") 
p + labs(title = "metabolon_batch_norm")


p <- plot_UMAP(dd,  color = "NEG", shape = "ID_year") 
p + labs(title = "metabolon_batch_norm")


p <- plot_UMAP(dd,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_batch_norm") +
  facet_grid(~study)


p <- plot_UMAP(dd,  color = "AMD_status", shape = "AMD_status", size = 1) 
p + labs(title = "metabolon_batch_norm") +
  facet_grid(~study)



p <- plot_tsne(dd,  color = "NEG", shape = "study") 
p + labs(title = "metabolon_batch_norm")



p <- plot_tsne(dd,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "metabolon_batch_norm") +
  facet_grid(~study)


p <- plot_tsne(dd,  color = "AMD_status", shape = "AMD_status", size = 1) 
p + labs(title = "metabolon_batch_norm") +
  facet_grid(~study)



plot_Metabolite(dd, plot = "boxplot", feature_name = "X563") + facet_grid(~study)

plot_Metabolite(dd, plot = "boxplot", feature_name = "X563")
plot_Metabolite(dd, plot = "boxplot")

plot_injection_order(df_metabolon_batch_norm, feature_name = "X563", size = 1)
plot_injection_order(df_metabolon_batch_norm, shape = "study")




}
# 3) read MTRX data ####

df_2016 <- load_excel(path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-16ML_CO/MEEI-01-16ML Data Tables_MTRX Included.xlsx", 
                 data_sheet = 4, 
                 feature_sheet = 2,
                 sample_sheet = 3)

df_2016

# for MEEI-00058, volumn only 70, scale t0 100. 

df_2016_data <- df_2016@assayData

df_2016_data[PARENT_SAMPLE_NAME == "MEEI-00058", 2:10]
df_2016_data[PARENT_SAMPLE_NAME == "MEEI-00058", 2:NCOL(df_2016_data)] <- df_2016_data[PARENT_SAMPLE_NAME == "MEEI-00058", 2:NCOL(df_2016_data)]*100/70
df_2016_data[PARENT_SAMPLE_NAME == "MEEI-00058", 2:10]

df_2016@assayData <- df_2016_data

df_2016@sampleData[, QC_sample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX"), 1, 0)]





df_2017 <- load_excel(path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-17ML+/MEEI-01-17ML+ Data Tables_MTRX Included.xlsx", 
                 data_sheet = 4, 
                 feature_sheet = 2,
                 sample_sheet = 3)

df_2017
df_2017@sampleData[, QC_sample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX"), 1, 0)]



df_2020 <- load_excel(path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-20PHML+/MEEI-01-20PHML+ Data Tables_MTRX Included.xlsx", 
                 data_sheet = 4, 
                 feature_sheet = 2,
                 sample_sheet = 3)
df_2020

df_2020@sampleData[, QC_sample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX"), 1, 0)]



# updated injection order 
df_2016 <- update_Metabolite(df_2016, df_order_2016, action = "injection_order")
df_2016 

df_2017 <- update_Metabolite(df_2017, df_order_2017, action = "injection_order")
df_2017 

df_2020 <- update_Metabolite(df_2020, df_order_2020, action = "injection_order")
df_2020



# normalize 

df_2016 <- QC_pipeline(df_2016, impute_method = NULL)
df_2016

df_2016_QC_norm <- QCmatrix_norm(df_2016)
df_2016_batch_norm <- batch_norm(df_2016)
df_2016_nearestQC_norm <- nearestQC_norm(df_2016)
df_2016_LOESS_norm <- LOESS_norm(df_2016)






df_2016_QC_norm <- QC_pipeline(df_2016_QC_norm, impute_method = NULL)
df_2016_batch_norm <- QC_pipeline(df_2016_batch_norm, impute_method = NULL)
df_2016_nearestQC_norm  <- QC_pipeline(df_2016_nearestQC_norm, impute_method = NULL)
df_2016_nearestQC_norm

df_2016_LOESS_norm  <- QC_pipeline(df_2016_LOESS_norm, impute_method = NULL)


# df_2016_QC_norm <- impute(df_2016_QC_norm)
# df_2016_batch_norm <- impute(df_2016_batch_norm)


dd <- run_PCA(df_2016)
p <- plot_PCA(dd,  color = "QC_sample", shape = "NEG")
p + labs(title = "2016 raw")


dd <- PCA(df_2016_QC_norm)
p <- plot_PCA(dd,  color = "QC_sample", shape = "NEG")
p + labs(title = "2016 QCmatrix_norm")


dd <- PCA(df_2016_batch_norm)
p <- plot_PCA(dd,  color = "QC_sample", shape = "NEG")
p + labs(title = "2016 batch_norm")



# 2017

df_2017 <- QC_pipeline(df_2017, impute_method = NULL)
df_2017

df_2017_QC_norm <- QCmatrix_norm(df_2017)
df_2017_batch_norm <- batch_norm(df_2017)
df_2017_nearestQC_norm <- nearestQC_norm(df_2017)
df_2017_LOESS_norm <- LOESS_norm(df_2017)


df_2017_QC_norm <- QC_pipeline(df_2017_QC_norm, impute_method = NULL)
df_2017_batch_norm <- QC_pipeline(df_2017_batch_norm, impute_method = NULL)
df_2017_nearestQC_norm <- QC_pipeline(df_2017_nearestQC_norm, impute_method = NULL)
df_2017_LOESS_norm <- QC_pipeline(df_2017_LOESS_norm, impute_method = NULL)

df_2017_LOESS_norm


# df_2017_nearestQC_norm_1 <- nearestQC_norm(df_2017, n_nearest_QCsample = 1)
# df_2017_nearestQC_norm_1 <- QC_pipeline(df_2017_nearestQC_norm_1, impute_method = NULL)


# df_2017_nearestQC_norm_4 <- nearestQC_norm(df_2017, n_nearest_QCsample = 4)
# df_2017_nearestQC_norm_4 <- QC_pipeline(df_2017_nearestQC_norm_4, impute_method = NULL)



if(0) {
 
  
  r <- correlation(df_2017_batch_norm, df_metabolon_batch_norm)
  boxplot(r$r)
  
  
  
  r <- correlation(df_2017_QC_norm, df_metabolon_QC_norm)
  boxplot(r$r)
  
   
   r <- correlation(df_2017_QC_norm, df_2017_batch_norm)
   boxplot(r$r)
  
  
   r <- correlation(df_2017_QC_norm, df_2017_nearestQC_norm)
  
  r
  v_test <- r$name[1:16]
 v_test
   
     
  plot(df_2017_batch_norm@assayData$X563, df_2017_QC_norm@assayData$X563)
    plot(df_2017_nearestQC_norm@assayData$X563, df_2017_QC_norm@assayData$X563)
  
    plot(df_2017_batch_norm@assayData$X100002113, df_2017_QC_norm@assayData$X100002113)
plot(df_2017_nearestQC_norm@assayData$X100002113, df_2017_QC_norm@assayData$X100002113)
 
  

plot_injection_order(df_2017, feature_name = "X100002113", color = "QC_sample")
plot_injection_order(df_2017_batch_norm, feature_name = "X100002113", color = "QC_sample")
plot_injection_order(df_2017_QC_norm, feature_name = "X100002113", color = "QC_sample")
plot_injection_order(df_2017_nearestQC_norm, feature_name = "X100002113", color = "QC_sample")
 

feature_name <- "X100000784"
plot_injection_order(df_2017, feature_name = feature_name , color = "QC_sample")
plot_injection_order(df_2017_batch_norm, feature_name =feature_name , color = "QC_sample")
plot_injection_order(df_2017_QC_norm, feature_name =feature_name , color = "QC_sample")
plot_injection_order(df_2017_nearestQC_norm, feature_name = feature_name , color = "QC_sample")

  


# feature_name <- str_split_fixed(v_test, "\\.", 2)[,1]
feature_name <- v_test
plot_injection_order(df_2017, feature_name =  feature_name, color = "QC_sample")  + labs(title = "2017 raw")
plot_injection_order(df_2017_batch_norm, feature_name =feature_name , color = "QC_sample") + labs(title = "2017 batch norm")
plot_injection_order(df_2017_QC_norm, feature_name =feature_name , color = "QC_sample")  + labs(title = "2017 QCmatrix_norm")
plot_injection_order(df_2017_nearestQC_norm, feature_name = feature_name , color = "QC_sample") + labs(title = "2017 nearest QC_norm")
   


}


# df_2017_QC_norm <- impute(df_2017_QC_norm)
# df_2017_batch_norm <- impute(df_2017_batch_norm)


dd <- PCA(df_2017)
p <- plot_PCA(dd,  color = "NEG", shape = "QC_sample")
p + labs(title = "2017 raw")

dd <- PCA(df_2017_QC_norm)
p <- plot_PCA(dd,  color = "NEG", shape = "QC_sample")
p + labs(title = "2017 QCmatrix_norm")


dd <- PCA(df_2017_batch_norm)
p <- plot_PCA(dd,  color = "NEG", shape = "QC_sample")
p + labs(title = "2017 batch_norm")


dd <- PCA(df_2017_nearestQC_norm)
p <- plot_PCA(dd,  color = "NEG", shape = "QC_sample")
p + labs(title = "2017 nearestQC_norm")



# 2020

df_2020 <- QC_pipeline(df_2020, impute_method = NULL)
df_2020
df_2020_QC_norm <- QCmatrix_norm(df_2020)
df_2020_batch_norm <- batch_norm(df_2020)
df_2020_nearestQC_norm <- nearestQC_norm(df_2020)
df_2020_LOESS_norm <- LOESS_norm(df_2020)
df_2020_LOESS_norm


df_2020_QC_norm <- QC_pipeline(df_2020_QC_norm, impute_method = NULL)
df_2020_batch_norm <- QC_pipeline(df_2020_batch_norm, impute_method = NULL)
df_2020_nearestQC_norm <- QC_pipeline(df_2020_nearestQC_norm, impute_method = NULL)
df_2020_LOESS_norm <- QC_pipeline(df_2020_LOESS_norm, impute_method = NULL)



# df_2020_QC_norm <- impute(df_2020_QC_norm)
# df_2020_batch_norm <- impute(df_2020_batch_norm)




dd <- PCA(df_2020)
p <- plot_PCA(dd,  color = "NEG", shape = "QC_sample")
p + labs(title = "2020 raw")

dd <- PCA(df_2020_QC_norm)
p <- plot_PCA(dd,  color = "NEG", shape = "QC_sample")
p + labs(title = "2020 QCmatrix_norm")


dd <- PCA(df_2020_batch_norm)
p <- plot_PCA(dd,  color = "NEG", shape = "QC_sample")
p + labs(title = "2020 batch_norm")


dd <- PCA(df_2020_nearestQC_norm)
p <- plot_PCA(dd,  color = "NEG", shape = "QC_sample")
p + labs(title = "2020 nearestQC_norm")



# conversion factor 
df_factor <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/order/conversionFactors_M4toM7_FinalList_updated.csv")
df_factor

df_factor[, length(unique(COMP_ID))]
df_factor[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_factor
setnames(df_factor, "CF", "conversion_factor_value")
df_factor[, table(duplicated(conversion_factor_ID))]
df_factor




# for 2016

df_feature <- df_2016_QC_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_2016_QC_norm@featureData <- df_feature
df_2016_QC_norm
df_2016_QC_norm_rescale <- rescale(df_2016_QC_norm, conversion_factor_data = df_factor)
df_2016_QC_norm_rescale
 

df_feature <- df_2016_nearestQC_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_2016_nearestQC_norm@featureData <- df_feature
df_2016_nearestQC_norm_rescale <- rescale(df_2016_nearestQC_norm, conversion_factor_data = df_factor)
df_2016_nearestQC_norm
 

df_feature <- df_2016_LOESS_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_2016_LOESS_norm@featureData <- df_feature
df_2016_LOESS_norm_rescale <- rescale(df_2016_LOESS_norm, conversion_factor_data = df_factor)
df_2016_LOESS_norm_rescale
 



df_feature <- df_2017_QC_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_2017_QC_norm@featureData <- df_feature
df_2017_QC_norm
df_2017_QC_norm_rescale <- rescale(df_2017_QC_norm, conversion_factor_data = df_factor)
df_2017_QC_norm_rescale


df_feature <- df_2017_nearestQC_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_2017_nearestQC_norm@featureData <- df_feature
df_2017_nearestQC_norm
df_2017_nearestQC_norm_rescale <- rescale(df_2017_nearestQC_norm, conversion_factor_data = df_factor)
df_2017_nearestQC_norm_rescale




df_feature <- df_2017_LOESS_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_2017_LOESS_norm@featureData <- df_feature
df_2017_LOESS_norm
df_2017_LOESS_norm_rescale <- rescale(df_2017_LOESS_norm, conversion_factor_data = df_factor)
df_2017_LOESS_norm_rescale











# PCA after rescale 



df_PCA <- PCA(df_2016_QC_norm_rescale)
p <- plot_PCA(df_PCA)
p


df_PCA <- PCA(df_2017_QC_norm_rescale)
p <- plot_PCA(df_PCA)
p


# merge data. 

df_m_raw <- merge_data(df_2016, df_2017)
df_m_raw <- merge_data(df_m_raw, df_2020)
df_m_raw

df_m_raw <- QC_pipeline(df_m_raw, impute_method = NULL)
df_m_raw


df_m_raw <- update_Metabolite(df_m_raw, df_sample_clean, action = "add_sample_annotation")
df_m_raw


# updated injection order 
df_m_raw <- update_Metabolite(df_m_raw, df_order_merge, action = "injection_order")
df_m_raw

df_m_raw@sampleData$study <- ifelse(is.na(df_m_raw@sampleData$study), "QC", df_m_raw@sampleData$study)

df_m_raw@sampleData$ID_year <- ifelse(is.na(df_m_raw@sampleData$ID_year), "999", df_m_raw@sampleData$ID_year)




# 
df_m <- merge_data(df_2016_QC_norm, df_2017_QC_norm)
df_m

df_m <- QC_pipeline(df_m, impute_method = NULL)
df_m

df_m_PCA <- PCA(df_m)
p <- plot_PCA(df_m_PCA)
p

#  merge three datasets
df_m <- merge_data(df_m, df_2020_QC_norm)
df_m

df_m <- QC_pipeline(df_m, impute_method = NULL)
df_m

df_m_PCA <- run_PCA(df_m)
p <- plot_PCA(df_m_PCA)

p + labs(title = "merge 2016,2017,2020, no conversion factor to 2016,2017")



#  scale  ####

# rm(df_m)
df_m_scale <- merge_data(df_2016_QC_norm_rescale, df_2017_QC_norm_rescale)
df_m_scale <- QC_pipeline(df_m_scale, impute_method = NULL)
df_m_scale

which("X172" ==  names(df_2016_QC_norm_rescale@assayData))
length(names(df_2016_QC_norm_rescale@assayData))



dd <- PCA(df_m_scale)
p <- plot_PCA(df_m_PCA)
p

# 
df_m_scale <- merge_data(df_m_scale, df_2020_QC_norm)
df_m_scale


df_m_scale <- QC_pipeline(df_m_scale, impute_method = NULL)
df_m_scale


df_m_scale <- update_Metabolite(df_m_scale, df_sample_clean, action = "add_sample_annotation")
df_m_scale


# updated injection order 
df_m_scale <- update_Metabolite(df_m_scale, df_order_merge, action = "injection_order")
df_m_scale

df_m_scale@sampleData$study <- ifelse(is.na(df_m_scale@sampleData$study), "QC", df_m_scale@sampleData$study)

df_m_scale@sampleData$ID_year <- ifelse(is.na(df_m_scale@sampleData$ID_year), "999", df_m_scale@sampleData$ID_year)




# LOESS QC
df_m_LOESS <- merge_data(df_2016_LOESS_norm_rescale, df_2017_LOESS_norm_rescale)
df_m_LOESS <- QC_pipeline(df_m_LOESS, impute_method = NULL)
df_m_LOESS


df_m_LOESS <- merge_data(df_m_LOESS, df_2020_LOESS_norm)

df_m_LOESS <- QC_pipeline(df_m_LOESS, impute_method = NULL)
df_m_LOESS


df_m_LOESS <- update_Metabolite(df_m_LOESS, df_sample_clean, action = "add_sample_annotation")
df_m_LOESS


# updated injection order 
df_m_LOESS <- update_Metabolite(df_m_LOESS, df_order_merge, action = "injection_order")
df_m_LOESS

df_m_LOESS@sampleData$study <- ifelse(is.na(df_m_LOESS@sampleData$study), "QC", df_m_LOESS@sampleData$study)

df_m_LOESS@sampleData$ID_year <- ifelse(is.na(df_m_LOESS@sampleData$ID_year), "999", df_m_LOESS@sampleData$ID_year)





# nearest QC
df_m_nearestQC <- merge_data(df_2016_nearestQC_norm_rescale, df_2017_nearestQC_norm_rescale)
df_m_nearestQC <- QC_pipeline(df_m_nearestQC, impute_method = NULL)
df_m_nearestQC


df_m_nearestQC <- merge_data(df_m_nearestQC, df_2020_nearestQC_norm)

df_m_nearestQC <- QC_pipeline(df_m_nearestQC, impute_method = NULL)
df_m_nearestQC


df_m_nearestQC <- update_Metabolite(df_m_nearestQC, df_sample_clean, action = "add_sample_annotation")
df_m_nearestQC


# updated injection order 
df_m_nearestQC <- update_Metabolite(df_m_nearestQC, df_order_merge, action = "injection_order")
df_m_nearestQC

df_m_nearestQC@sampleData$study <- ifelse(is.na(df_m_nearestQC@sampleData$study), "QC", df_m_nearestQC@sampleData$study)

df_m_nearestQC@sampleData$ID_year <- ifelse(is.na(df_m_nearestQC@sampleData$ID_year), "999", df_m_nearestQC@sampleData$ID_year)






# batch ####

df_m_batch <- merge_data(df_2016_batch_norm, df_2017_batch_norm)
df_m_batch <- QC_pipeline(df_m_batch, impute_method = NULL)
df_m_batch

df_m_batch <- merge_data(df_m_batch, df_2020_batch_norm)
df_m_batch

df_m_batch <- QC_pipeline(df_m_batch, impute_method = NULL)
df_m_batch


df_m_batch <- update_Metabolite(df_m_batch, df_sample_clean, action = "add_sample_annotation")
df_m_batch


# updated injection order 
df_m_batch <- update_Metabolite(df_m_batch, df_order_merge, action = "injection_order")
df_m_batch
df_m_batch@sampleData[, study := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX"), "QC", study)]



# check with Metabolon data ######
if(0) {
  
  df_m_scale
  df_metabolon_QC_norm
  
  
   r  <- correlation(df_m_scale, df_metabolon_QC_norm)
  boxplot(r$r)
  
  
  r <- correlation(df_m_batch, df_metabolon_batch_norm)
  boxplot(r$r)
  
  
  # check batch norm
      v_name <- intersect(names(df_m_batch@assayData)[-1], names(df_metabolon_batch_norm@assayData)[-1])
    df_check <- merge(df_m_batch@assayData, df_metabolon_batch_norm@assayData, by = "PARENT_SAMPLE_NAME")
   res <- correlation(df_m_batch, df_metabolon_batch_norm)
   
    
    
    # check qc norm
    v_name <- intersect(names(df_m_scale@assayData)[-1], names(df_metabolon_QC_norm@assayData)[-1])
    df_check <- merge(df_m_scale@assayData, df_metabolon_QC_norm@assayData, by = "PARENT_SAMPLE_NAME")
  
     res <- correlation(df_m_scale, df_metabolon_QC_norm)
    res
    
  boxplot(res$r)
  
  df_check[, plot(X999923739.x, X999923739.y)]
  df_check[, plot(X1869.x, X1869.y)]
  
  df_check[, plot( X100019968.x,  X100019968.y)]

  dd <- merge(df_check, df_m_scale@sampleData, by = "PARENT_SAMPLE_NAME")
  
  ggplot(data = dd) +
    geom_point(aes(X100019968.x,  X100019968.y, color = factor(NEG))) +
    geom_abline(slope = 1, intercept = 0)
  
    ggplot(data = dd) +
    geom_point(aes(X50.x,  X50.y, color = factor(NEG))) +
    geom_abline(slope = 1, intercept = 0)
  
  
    ggplot(data = dd) +
    geom_point(aes(X100008929.x,  X100008929.y, color = factor(NEG))) +
    geom_abline(slope = 1, intercept = 0)
  
    
    
        ggplot(data = dd) +
    geom_point(aes(X100021784.x,  X100021784.y, color = factor(NEG))) +
    geom_abline(slope = 1, intercept = 0)
  
    
        
         dd <- df_check[, list(PARENT_SAMPLE_NAME, X100021784.x, X100021784.y)]
    
   dd[, ratio := X100021784.x / X100021784.y]
  dd [, plot(X100021784.x,X100021784.y)]

  dd[, hist(ratio)]
  
  
         
         df_check[, plot(X50.x, X50.y)]
  
  
  dd <- df_check[, list(PARENT_SAMPLE_NAME, X50.x, X50.y)]
  dd[, ratio := X50.x / X50.y]
  dd [, plot(X50.x, X50.y)]

  dd[, hist(ratio)]
  
  
  
  dd <- merge(dd,df_QC@sampleData,  by = "PARENT_SAMPLE_NAME")
  dd[, table(NEG)]

  dd
  
  dd <- df_check[, list(PARENT_SAMPLE_NAME, X100008929.x, X100008929.y)]
  
  dd[, ratio := X100008929.x / X100008929.y]
  dd [, plot(X100008929.x, X100008929.y)]

  dd[, hist(ratio)]
  
  dd
  
  dd <- merge(df_m_raw@assayData[, list(PARENT_SAMPLE_NAME, X100008929)], dd, by = "PARENT_SAMPLE_NAME", all.x = TRUE)
  dd
  
  dd <- merge(dd, df_m_scale@sampleData, by = "PARENT_SAMPLE_NAME", all.x = TRUE)
  dd
  
  dd_QC <-  dd[str_detect(PARENT_SAMPLE_NAME, "MTRX"), ]
  dd_QC
  dd_QC[, table(NEG)]
  psych::describeBy(dd_QC$X100008929, dd_QC$NEG)
  
  
  dd[str_detect(PARENT_SAMPLE_NAME, "MTRX"), by(X100008929, NEG, median, na.rm = TRUE)]
  
}


dd <- PCA(df_m_scale)


dd <- PCA(df_m_nearestQC)

dd
p <- plot_PCA(dd,  color = "NEG", shape = "study")
p + labs(title = "inhouse_QC_norm")


p <- plot_PCA(dd,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "inhouse_QC_norm") +
  facet_grid(~study)



p <- plot_UMAP(dd,  color = "NEG", shape = "study") 
p + labs(title = "inhouse_QC_norm")


p <- plot_UMAP(dd,  color = "NEG", shape = "ID_year") 
p + labs(title = "inhouse_QC_norm")


p <- plot_UMAP(dd,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "inhouse_QC_norm") +
  facet_grid(~study)



p <- plot_tsne(dd,  color = "NEG", shape = "study") 
p + labs(title = "inhouse_QC_norm")


p <- plot_tsne(dd,  color = "NEG", shape = "ID_year", size = 1) 
p + labs(title = "inhouse_QC_norm") +
  facet_grid(~study)



plot_Metabolite(dd, plot = "boxplot", feature_name = "X563")
plot_Metabolite(dd, plot = "boxplot", feature_name = "X563") + facet_grid(~study)


plot_Metabolite(dd, plot = "boxplot") + labs(title = "inhouse_QC_norm")


plot_injection_order(df_m_scale, feature_name = "X563", size = 1, shape = "study")

plot_injection_order(df_m_scale, shape = "NEG", color = "study")


plot_injection_order(df_m_scale, shape = "NEG", color = "study") +
  scale_color_manual(values = c( "blue","grey", "red"))



# batch

plot_Metabolite(df_m_batch, plot = "boxplot", feature_name = "X563")
plot_Metabolite(df_m_batch, plot = "boxplot", feature_name = "X563") + facet_grid(~study)


df_m_batch

which(names(df_m_batch@sampleData) == "study")

str(df_m_batch@sampleData$study)

plot_Metabolite(df_m_batch, plot = "boxplot") + labs(title = "inhouse_QC_norm")

plot_injection_order(df_m_batch, shape = "NEG", color = "study") +
  scale_color_manual(name = "study", values = c( "blue","grey", "red"))




# raw value of QC samples #####

dd <- df_m_raw


plot_Metabolite(df_m_raw, plot = "boxplot", feature_name = "X563")


plot_Metabolite(df_m_nearestQC, plot = "boxplot", feature_name = "X563")

plot_Metabolite(df_m_LOESS, plot = "boxplot", feature_name = "X563")



plot_Metabolite(dd, plot = "boxplot", feature_name = "X563")
plot_Metabolite(dd, plot = "boxplot", feature_name = "X563") + facet_grid(~study)


plot_Metabolite(dd, plot = "boxplot") + labs(title = "inhouse_raw")

plot_injection_order(dd, feature_name = "X563", size = 1, shape = "study")

plot_injection_order(dd, shape = "NEG", color = "study")




plot_injection_order(dd, shape = "NEG", color = "study") +
  scale_color_manual(values = c( "blue","grey", "red"))


# 

df <- df_m_scale@assayData

df <- df[str_detect(PARENT_SAMPLE_NAME, "MTRX")]
df


v_RSD <- apply(df[, -1], 2, RSD)
v_RSD 
hist(v_RSD)

sum(v_RSD > 40)

# names(v_RSD[v_RSD>40])

v_metab_test <- names(sort(v_RSD, decreasing = TRUE)[1:16])
v_metab_test


v_metab_test





r <- correlation(df_m_LOESS, df_m_nearestQC)
boxplot(r$r)
r <- correlation(df_m_LOESS, df_m_batch)
boxplot(r$r)


r <- correlation(df_m_batch, df_m_nearestQC)

r <- correlation(df_m_scale, df_m_nearestQC)

r <- correlation(df_m_batch, df_m_nearestQC)
boxplot(r$r)


boxplot(r$r)
boxplot(r$r)

v_metab_test <- r[1:16, name]

v_metab_test

plot_Metabolite(df_metabolon_QC_norm, plot = "boxplot", feature_name = v_metab_test) + labs(title = "Metabolon_QC_norm")


plot_Metabolite(df_m_scale, plot = "boxplot", feature_name = v_metab_test) + labs(title = "inhouse_QC_norm")

plot_Metabolite(df_m_nearestQC, plot = "boxplot", feature_name = v_metab_test) + labs(title = "inhouse_QC_norm")

plot_Metabolite(df_m_LOESS, plot = "boxplot", feature_name = v_metab_test) + labs(title = "inhouse_QC_norm")



plot_Metabolite(df_m_batch, plot = "boxplot", feature_name = v_metab_test) + labs(title = "inhouse_batch_norm")


plot_Metabolite(df_m_raw, plot = "boxplot", feature_name = v_metab_test) + labs(title = "Peak area data")


plot_injection_order(df_m_raw, shape = "NEG", color = "study", feature_name = v_metab_test) +
  scale_color_manual(values = c( "blue","grey", "red")) +
  labs(title = "Peak area data")



plot_injection_order(df_m_scale, shape = "NEG", color = "study", feature_name = v_metab_test) +
  scale_color_manual(values = c( "blue","grey", "red")) + 
  labs(title = "inhouse_QC_norm")


dd <- df_m_LOESS@assayData
dd[, 2:NCOL(dd)][dd[, 2:NCOL(dd)] <= 0] <- NA

df_m_LOESS@assayData <- dd
df_m_LOESS <- replace_outlier(df_m_LOESS)


plot_injection_order(df_m_LOESS, shape = "NEG", color = "study", feature_name = v_metab_test) +
  scale_color_manual(values = c( "blue","grey", "red")) + 
  labs(title = "inhouse_LOESS")





v_RSD <- apply(df_m_scale@assayData[, -1], 2, RSD)
psych::describe(v_RSD)


v_RSD <- apply(df_m_nearestQC@assayData[, -1], 2, RSD)
psych::describe(v_RSD)

v_RSD <- apply(df_m_LOESS@assayData[, -1], 2, RSD)
psych::describe(v_RSD)

v_RSD <- apply(df_m_raw@assayData[, -1], 2, RSD)
psych::describe(v_RSD)



plot_injection_order(df_m_nearestQC, shape = "NEG", color = "study", feature_name = v_metab_test) +
  scale_color_manual(values = c( "blue","grey", "red")) + 
  labs(title = "inhouse_nearestQC")



plot_injection_order(df_m_scale, shape = "NEG", color = "study") +
  scale_color_manual(values = c( "blue","grey", "red")) + 
  labs(title = "inhouse_QC_norm")



plot_injection_order(df_m_raw, shape = "NEG", color = "study") +
  scale_color_manual(values = c( "blue","grey", "red")) + 
  labs(title = "inhouse_raw_norm")




plot_injection_order(df_m_scale, feature_name = "X100009233", color = "study",size = 1, shape = "NEG")


plot_injection_order(df_m_raw, feature_name = "X100009233", color = "study",size = 1, shape = "NEG") 

plot_injection_order(df_m_scale, feature_name = "X100009233", color = "study",size = 1, shape = "NEG") +
  scale_y_continuous(limits = c(0,50)) 
# 




# save data ####
if(0) {

save(list = ls(all.names = TRUE), file = "/n/holyscratch01/liang_lab/xikun/todelete/QC_AMD_data.RData", envir = .GlobalEnv)

load("/n/holyscratch01/liang_lab/xikun/todelete/QC_AMD_data.RData")

}



# new injection order data ####
if(0) {
  
  df <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/update_QC_data/batchInfo15233_include run order.csv")
  df

  df[, table(SAMPLE_RUN_ORDER_NEG == SAMPLE_RUN_ORDER_POLAR)]
   df[, table(SAMPLE_RUN_ORDER_NEG == `SAMPLE_RUN_ORDER_POS EARLY`)]
  df[, table(SAMPLE_RUN_ORDER_NEG == `SAMPLE_RUN_ORDER_POS LATE`)]
  
  
  
  names(df)
  
  df[, table(SUBSET_NEG, SUBSET_POLAR, useNA = "ifany")]
  df[, table(SUBSET_NEG, `SUBSET_POS EARLY`, useNA = "ifany")]
  df[, table(SUBSET_NEG, `SUBSET_POS LATE`, useNA = "ifany")]
  
  df[, SUBSET := SUBSET_NEG]
  
  
  df[, table(SUBSET, SUBSET_NEG, useNA = "ifany")]
   df[, table(SUBSET, SUBSET_POLAR, useNA = "ifany")]
  df[, table(SUBSET, `SUBSET_POS EARLY`, useNA = "ifany")]
  df[, table(SUBSET, `SUBSET_POS LATE`, useNA = "ifany")]
  
  
  df[, SUBSET := ifelse(is.na(SUBSET), SUBSET_POLAR - 5, SUBSET)]
  df[, SUBSET := ifelse(is.na(SUBSET), `SUBSET_POS EARLY` + 5, SUBSET)]
  df[, SUBSET := ifelse(is.na(SUBSET), `SUBSET_POS LATE` + 10, SUBSET)]
  
  
  
  
  df[, RUN_ORDER := ifelse(!is.na(SAMPLE_RUN_ORDER_NEG), SAMPLE_RUN_ORDER_NEG,
                           ifelse(!is.na(SAMPLE_RUN_ORDER_POLAR), SAMPLE_RUN_ORDER_POLAR,
                                  ifelse(!is.na(`SAMPLE_RUN_ORDER_POS EARLY`), `SAMPLE_RUN_ORDER_POS EARLY`,`SAMPLE_RUN_ORDER_POS LATE` )))]
  
  
  df <- df[order(SUBSET, RUN_ORDER)]
  
  df
  

  skimr::skim(df)
  
  df$PARENT_SAMPLE_NAME == df_order_2016$PARENT_SAMPLE_NAME
  
  df_order_2016
  
  gplots::venn(list(df$PARENT_SAMPLE_NAME, df_order_2016$PARENT_SAMPLE_NAME))
  setdiff(df$PARENT_SAMPLE_NAME, df_order_2016$PARENT_SAMPLE_NAME)
  
  
  df
  df <- merge(df_order_2016, df)
  
df_order_2020_new  <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/update_QC_data/batchInfo21713_include run order.csv", header = TRUE)

}


  

df_sample_clean <- fread("/n/holylfs05/LABS/liang_lab/Lab/xikun/AMD_metabolites/data/AMD_biomarker_data/df_plasma_sample.txt")
df_sample_clean



df_order_2016_new <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/update_QC_data/batchInfo15233_include run order.csv")
df_order_2017_new <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/update_QC_data/batchInfo17363_include run order.csv")
df_order_2020_new <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/update_QC_data/batchInfo21713_include run order.csv")


df_order_2016_new <- f_injection_reorder(data = df_order_2016_new)
df_order_2017_new <- f_injection_reorder(data = df_order_2017_new)
df_order_2020_new <- f_injection_reorder(data = df_order_2020_new)


df_order_merge_new <- rbind(df_order_2016_new, df_order_2017_new, df_order_2020_new, fill = TRUE)
df_order_merge_new



df_new_2016 <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/update_QC_data/rawPeakAreas15233.csv", header = TRUE)
df_new_2016[PARENT_SAMPLE_NAME == "MEEI-00058", 2:10]
df_new_2016[PARENT_SAMPLE_NAME == "MEEI-00058", 2:NCOL(df_new_2016)] <- df_new_2016[PARENT_SAMPLE_NAME == "MEEI-00058", 2:NCOL(df_new_2016)]*100/70
df_new_2016[PARENT_SAMPLE_NAME == "MEEI-00058", 2:10]



df_new_2017 <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/update_QC_data/rawPeakAreas17363.csv", header = TRUE)
df_new_2020 <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/update_QC_data/rawPeakAreas21713.csv", header = TRUE)



df_2016_feature <- readxl::read_excel( "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-16ML_CO/MEEI-01-16ML Data Tables_MTRX Included.xlsx", sheet = 2)
setDT(df_2016_feature)

df_2017_feature <- readxl::read_excel( "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-17ML+/MEEI-01-17ML+ Data Tables_MTRX Included.xlsx", sheet = 2)
setDT(df_2017_feature)

df_2020_feature <- readxl::read_excel( "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-20PHML+/MEEI-01-20PHML+ Data Tables_MTRX Included.xlsx", sheet = 2)
setDT(df_2020_feature)




# 2016
df_new_2016 <- create_Metabolite(assayData = df_new_2016,
                                  featureData = df_2016_feature,
                                  sampleData = df_order_2016_new,
                                  featureID = "CHEM_ID",
                                  sampleID ="PARENT_SAMPLE_NAME"
)

df_new_2016 <- QC_pipeline(df_new_2016, impute_method = NULL)
df_new_2016_QC_norm <- QCmatrix_norm(df_new_2016)
df_new_2016_batch_norm <- batch_norm(df_new_2016)
df_new_2016_nearestQC_norm <- nearestQC_norm(df_new_2016)

df_new_2016_QC_norm <- QC_pipeline(df_new_2016_QC_norm, impute_method = NULL)
df_new_2016_batch_norm <- QC_pipeline(df_new_2016_batch_norm, impute_method = NULL)
df_new_2016_nearestQC_norm <- QC_pipeline(df_new_2016_nearestQC_norm, impute_method = NULL)



# 2017
df_new_2017  <- create_Metabolite(assayData = df_new_2017,
                                  featureData = df_2017_feature,
                                  sampleData = df_order_2017_new,
                                  featureID = "CHEM_ID",
                                  sampleID ="PARENT_SAMPLE_NAME"
)

df_new_2017 <- QC_pipeline(df_new_2017, impute_method = NULL)
df_new_2017_QC_norm <- QCmatrix_norm(df_new_2017)
df_new_2017_batch_norm <- batch_norm(df_new_2017)
df_new_2017_nearestQC_norm <- nearestQC_norm(df_new_2017)

df_new_2017_QC_norm <- QC_pipeline(df_new_2017_QC_norm, impute_method = NULL)
df_new_2017_batch_norm <- QC_pipeline(df_new_2017_batch_norm, impute_method = NULL)
df_new_2017_nearestQC_norm <- QC_pipeline(df_new_2017_nearestQC_norm, impute_method = NULL)


# 2020
df_new_2020  <- create_Metabolite(assayData = df_new_2020,
                                  featureData = df_2020_feature,
                                  sampleData = df_order_2020_new,
                                  featureID = "CHEM_ID",
                                  sampleID ="PARENT_SAMPLE_NAME"
)

df_new_2020 <- QC_pipeline(df_new_2020, impute_method = NULL)
df_new_2020_QC_norm <- QCmatrix_norm(df_new_2020)
df_new_2020_batch_norm <- batch_norm(df_new_2020)
df_new_2020_nearestQC_norm <- nearestQC_norm(df_new_2020)


df_new_2020_QC_norm <- QC_pipeline(df_new_2020_QC_norm, impute_method = NULL)
df_new_2020_batch_norm <- QC_pipeline(df_new_2020_batch_norm, impute_method = NULL)
df_new_2020_nearestQC_norm <- QC_pipeline(df_new_2020_nearestQC_norm, impute_method = NULL)



# conversion factor for 2016 and 2017
# conversion factor 
df_factor <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/order/conversionFactors_M4toM7_FinalList_updated.csv")
df_factor

df_factor[, length(unique(COMP_ID))]
df_factor[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_factor
setnames(df_factor, "CF", "conversion_factor_value")
df_factor[, table(duplicated(conversion_factor_ID))]
df_factor



df_feature <- df_new_2016_QC_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_new_2016_QC_norm@featureData <- df_feature
df_new_2016_QC_norm_rescale <- rescale(df_new_2016_QC_norm, conversion_factor_data = df_factor)


df_feature <- df_new_2016_nearestQC_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_new_2016_nearestQC_norm@featureData <- df_feature
df_new_2016_nearestQC_norm_rescale <- rescale(df_new_2016_nearestQC_norm, conversion_factor_data = df_factor)




df_feature <- df_new_2017_QC_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_new_2017_QC_norm@featureData <- df_feature
df_new_2017_QC_norm_rescale <- rescale(df_new_2017_QC_norm, conversion_factor_data = df_factor)


df_feature <- df_new_2017_nearestQC_norm@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_new_2017_nearestQC_norm@featureData <- df_feature
df_new_2017_nearestQC_norm_rescale <- rescale(df_new_2017_nearestQC_norm, conversion_factor_data = df_factor)




# merge
df_new_m_raw <- merge_data(df_new_2016, df_new_2017)
df_new_m_raw <- merge_data(df_new_m_raw, df_new_2020)
df_new_m_raw <- QC_pipeline(df_new_m_raw, impute_method = NULL)
df_new_m_raw

df_new_m_raw <- update_Metabolite(df_new_m_raw, df_sample_clean, action = "add_sample_annotation")
df_new_m_raw

# updated injection order 
df_new_m_raw <- update_Metabolite(df_new_m_raw, df_order_merge_new, action = "injection_order")
df_new_m_raw
df_new_m_raw@sampleData$study <- ifelse(is.na(df_new_m_raw@sampleData$study), "QC", df_new_m_scale@sampleData$study)
df_new_m_raw@sampleData[, QC_sample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX"), 1, 0)]



# QC-norm rescale
df_new_m_scale <- merge_data(df_new_2016_QC_norm_rescale, df_new_2017_QC_norm_rescale)
df_new_m_scale <- merge_data(df_new_m_scale, df_new_2020_QC_norm)
df_new_m_scale <- QC_pipeline(df_new_m_scale, impute_method = NULL)
df_new_m_scale

df_new_m_scale <- update_Metabolite(df_new_m_scale, df_sample_clean, action = "add_sample_annotation")
df_new_m_scale

# updated injection order 
df_new_m_scale <- update_Metabolite(df_new_m_scale, df_order_merge_new, action = "injection_order")
df_new_m_scale
df_new_m_scale@sampleData$study <- ifelse(is.na(df_new_m_scale@sampleData$study), "QC", df_new_m_scale@sampleData$study)
df_new_m_scale@sampleData[, QC_sample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX"), 1, 0)]


# batch
df_new_m_batch_norm <- merge_data(df_new_2016_batch_norm, df_new_2017_batch_norm)
df_new_m_batch_norm <- merge_data(df_new_m_batch_norm, df_new_2020_batch_norm)
df_new_m_batch_norm <- QC_pipeline(df_new_m_batch_norm, impute_method = NULL)
df_new_m_batch_norm

df_new_m_batch_norm <- update_Metabolite(df_new_m_batch_norm, df_sample_clean, action = "add_sample_annotation")
df_new_m_batch_norm

# updated injection order 
df_new_m_batch_norm <- update_Metabolite(df_new_m_batch_norm, df_order_merge_new, action = "injection_order")
df_new_m_batch_norm
df_new_m_batch_norm@sampleData$study <- ifelse(is.na(df_new_m_batch_norm@sampleData$study), "QC", df_new_m_batch_norm@sampleData$study)
df_new_m_batch_norm@sampleData[, QC_sample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX"), 1, 0)]



# nearest QC
df_new_m_nearestQC_norm <- merge_data(df_new_2016_nearestQC_norm_rescale, df_new_2017_nearestQC_norm_rescale)
df_new_m_nearestQC_norm <- merge_data(df_new_m_nearestQC_norm, df_new_2020_nearestQC_norm)
df_new_m_nearestQC_norm <- QC_pipeline(df_new_m_nearestQC_norm, impute_method = NULL)
df_new_m_nearestQC_norm

df_new_m_nearestQC_norm <- update_Metabolite(df_new_m_nearestQC_norm, df_sample_clean, action = "add_sample_annotation")
df_new_m_nearestQC_norm

# updated injection order 
df_new_m_nearestQC_norm <- update_Metabolite(df_new_m_nearestQC_norm, df_order_merge_new, action = "injection_order")
df_new_m_nearestQC_norm
df_new_m_nearestQC_norm@sampleData$study <- ifelse(is.na(df_new_m_nearestQC_norm@sampleData$study), "QC", df_new_m_nearestQC_norm@sampleData$study)
df_new_m_nearestQC_norm@sampleData[, QC_sample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX"), 1, 0)]






# compare 


r <- correlation(df_new_m_scale, df_metabolon_QC_norm)
r
boxplot(r$r)




r <- correlation(df_new_m_batch_norm, df_metabolon_batch_norm)
r
boxplot(r$r)



r <- correlation(df_new_m_scale, df_new_m_nearestQC_norm)
r
boxplot(r$r)

r <- correlation(df_new_m_scale, df_new_2017_QC_norm_rescale)
r
boxplot(r$r)

v_test <- r$name[1:16]
v_test

feature_name =  "X563"
feature_name <- v_test
plot_injection_order(df_new_m_raw, feature_name =  feature_name, color = "QC_sample")  + labs(title = "raw peak area data")
plot_injection_order(df_new_m_batch_norm, feature_name =feature_name , color = "QC_sample") + labs(title = "batch norm")
plot_injection_order(df_new_m_scale, feature_name =feature_name , color = "QC_sample")  + labs(title = "QCmatrix_norm")
plot_injection_order(df_new_m_nearestQC_norm, feature_name = feature_name , color = "QC_sample") + labs(title = "nearest QC_norm")


plot_injection_order(df_new_m_raw, feature_name =  "X1000000784", color = "QC_sample")  + labs(title = "raw peak area data")

table("X1000784" %in% names(df_new_m_raw@assayData))


dd <- df_new_m_scale@assayData[, list(PARENT_SAMPLE_NAME, X100008929)]



###########
# 

```


# 2.1 regression
```{r}

library(metabolomicsR, lib.loc = "~/R/ifxrstudio/RELEASE_3_13/")
library(metabolomicsR)

load("/n/holyscratch01/liang_lab/xikun/todelete/QC_AMD_data.RData")

df <- copy(df_m_batch)

df <- transformation(df, method = "inverse_rank_transform")

df


df_pheno <- fread("/n/holylfs05/LABS/liang_lab/Lab/xikun/OCT/data/df_OCT_drusen_13_trait_update.txt")
df_pheno




names(df_pheno)

lapply(df_pheno, tab)

df_name_uniq <- fread("/n/holylfs05/LABS/liang_lab/Lab/xikun/OCT/data/OCT_trait_uniq_name")

df_name_uniq



res <- regression(object = df_m_batch, phenoData = df_pheno, model = "lm", outcome = "Classic_ETDRS_fields_OD_0_9",
                  covars = c("age", "sex"), factors = "sex", feature_name = c("X50", "X55")
                  )
res



res <- regression(object = df_m_batch, phenoData = df_pheno, model = "lm", formula = "Classic_ETDRS_fields_OD_0_9 ~ age + sex", factors = "sex", feature_name = c("X50", "X55")
                  )

res



library(future)

nbrOfWorkers()


mbm <- microbenchmarkCore::microbenchmark(
   res <- regression(object = df_m_batch, phenoData = df_pheno, model = "lm", outcome = "Classic_ETDRS_fields_OD_0_9",
                  covars = c("age", "sex"), factors = "sex", feature_name = c("X50", "X55")
                  ),
   res <- regression(object = df_m_batch, phenoData = df_pheno, model = "lm", outcome = "Classic_ETDRS_fields_OD_0_9",
                  covars = c("age", "sex"), factors = "sex", feature_name = c("X50", "X55")
                  ),
  times = 1)

mbm




mbm <- microbenchmarkCore::microbenchmark(
   res <- regression(object = df_m_batch, phenoData = df_pheno, model = "lm", outcome = "Classic_ETDRS_fields_OD_0_9",
                  covars = c("age", "sex"), factors = "sex"
                  ),
   res2 <- regression(object = df_m_batch, phenoData = df_pheno, model = "lm", outcome = "Classic_ETDRS_fields_OD_0_9",
                  covars = c("age", "sex"), factors = "sex", ncpus = 8
   )
  , times = 1)

mbm


res <- regression3(object = df_m_batch, phenoData = df_pheno, model = "logistic", outcome = "Classic_ETDRS_fields_OD_0_9",
                  covars = c("age", "sex"), factors = "sex", feature_name = c("X50", "X55")
                  )
res



res <- regression(object = df_m_batch, phenoData = df_pheno, model = "log", outcome = "Classic_Drusen_OD_0_No_1_Yes",
                  covars = c("age", "sex"), factors = "sex", feature_name = c("X50", "X55")
                  )
res

res <- regression(object = df_m_batch, phenoData = df_pheno, model = "glm", outcome = "Classic_Drusen_OD_0_No_1_Yes",
                  covars = c("age", "sex"), factors = "sex"
                  )




res <- regression(object = df_m_batch, phenoData = df_pheno, model = "cox",time = "age", outcome = "Classic_Drusen_OD_0_No_1_Yes",
                  covars = c("sex"), factors = "sex", feature_name = c("X50", "X55")
                  )
res




res <- regression(object = df_m_batch, phenoData = df_pheno, model = "cox",time = "age", outcome = "Classic_Drusen_OD_0_No_1_Yes",
                  covars = c("sex"), factors = "sex"
                  )
res




mbm <- microbenchmark(
   regression(object = df_m_batch, phenoData = df_pheno, model = "cox",time = "age", outcome = "Classic_Drusen_OD_0_No_1_Yes",
                  covars =c("sex",  "age_squ"), factors = "sex"
                  ),
   res <- regression(object = df_m_batch, phenoData = df_pheno, model = "cox2",time = "age", outcome = "Classic_Drusen_OD_0_No_1_Yes",
                  covars =c("sex",  "age_squ"), factors = "sex"
                  )
  , times = 2)

mbm


formula <- as.formula("Classic_Drusen_OD_0_No_1_Yes ~ age + sex + X50")
formula


skimr::skim(res)

object <- df
phenoData <- copy(df_pheno)



names(phenoData)
names(df_pheno)


outcome <- "Classic_ETDRS_fields_OD_0_9"

covars = c("sex", "age_squ")


model = "lm"
group_by = NULL
covars = c("age", "sex")
factors = "sex"
feature_name = c("X50", "X55")
time = NULL
verbose = TRUE


time = "age"

formula <- v_formula
formula

data <- df


# mixed model  ####


df_pheno
names(df_pheno)
df
v_column_reg <- names(df_pheno)[10:35]

v_i <- v_column_reg[1]
v_i

sort(v_column_reg)

table(str_remove_all(v_column_reg, "OS|OD"))


v_column_reg_0_9 <- grep("0_9", v_column_reg, value = TRUE)
v_column_reg_0_9

v_column_reg_0_1 <- grep("0_No_1_Yes", v_column_reg, value = TRUE)
v_column_reg_0_1



df_pheno
df_0_1 <- df_pheno[, c("PARENT_SAMPLE_NAME", "ID", "sex", "age", "study", v_column_reg_0_1), with = FALSE]
df_0_1
df_0_1 <- tidyr::gather(df_0_1, trait, value, v_column_reg_0_1)
setDT(df_0_1)
df_0_1[, table(trait)]
df_0_1[, trait_uniq := str_remove_all(trait, "_OS|_OD")]

df_0_1[, table(trait_uniq)]
df_0_1

df_0_1[, OS_OD := ifelse(str_detect(trait, "OS"), "OS", 
                                    ifelse(str_detect(trait, "OD"), "OD", NA))]

df_0_1[, table(OS_OD)]

df_0_1[, trait := NULL]
df_0_1 <- tidyr::spread(df_0_1, key = trait_uniq, value = value)
df_0_1



df_0_9  <- df_pheno[, c("PARENT_SAMPLE_NAME", "ID", "sex", "age", "study", v_column_reg_0_9), with = FALSE]
df_0_9 
df_0_9 <- tidyr::gather(df_0_9, trait, value, v_column_reg_0_9)
setDT(df_0_9)

df_0_9[, table(trait)]

df_0_9[, trait_uniq := str_remove_all(trait, "_OS|_OD")]

df_0_9[, table(trait_uniq)]

df_0_9[, OS_OD := ifelse(str_detect(trait, "OS"), "OS", 
                                    ifelse(str_detect(trait, "OD"), "OD", NA))]

df_0_9[, table(OS_OD)]

df_0_9[, trait := NULL]
df_0_9 <- tidyr::spread(df_0_9, key = trait_uniq, value = value)
df_0_9

	


res <- regression(object = df_m_batch, phenoData = df_0_9, model = "lme", outcome = "Classic_ETDRS_fields_0_9", covars = c("sex", "age"), factors = "sex", feature_name = c("X50", "X55"), random = ~1 | PARENT_SAMPLE_NAME )
res


res <- regression(object = df_m_batch, phenoData = df_0_9, model = "lme", outcome = "Classic_ETDRS_fields_0_9", covars = c("sex", "age"), factors = "sex", random = ~1 | PARENT_SAMPLE_NAME )
res



v_formula <- as.formula("value ~  age + sex")
v_formula <- as.formula("value ~   sex + X50")
# library(nlme)

fit <-  nlme::lme(v_formula,   data = dd, random = ~1 | PARENT_SAMPLE_NAME, na.action = na.omit,  keep.data = FALSE, control=nlme::lmeControl(opt = "optim"), method = "REML")

fit

res <- as.data.table(summary(fit)$tTable, keep.rownames = TRUE)
res <- res[, list(term = rn, estimate = Value, std.error = Std.Error,  statistic = `t-value`, p.value = `p-value`,  n = fit$dims[["N"]])]
res

dd
library(nlme)

dd
v_formula <- as.formula("Classic_ETDRS_fields_0_9 ~  age + sex")

v_formula <- as.formula("Classic_ETDRS_fields_0_9 ~  age + sex + (1 | PARENT_SAMPLE_NAME)")

v_formula
all.vars(v_formula)



fit <-  fit_lme(data = df_0_9 , formula = v_formula, random = ~1 | PARENT_SAMPLE_NAME)
fit


library(lmerTest)
fit <-  fit_lmer(data = df_0_9 , formula = v_formula, random = ~ (1 | PARENT_SAMPLE_NAME))
fit

str(fit)

fit <- lmerTest::lmer(Classic_ETDRS_fields_0_9 ~  age + sex + (1 | PARENT_SAMPLE_NAME), data = df_0_9)
summary(fit)

fit <- nlme::lme(Classic_ETDRS_fields_0_9 ~  age + sex, random = ~1 | PARENT_SAMPLE_NAME, data = df_0_9, na.action = na.omit)
summary(fit)

str(fit)

fit@optinfo$conv$lme4




res <- regression(object = df_m_batch, phenoData = df_0_9, model = "lme", outcome = "Classic_ETDRS_fields_0_9",
                  covars = c("age","sex"), factors = "sex",  random = ~1 | PARENT_SAMPLE_NAME, feature_name = c("X50", "X55")
                  )
res


res <- regression(object = df_m_batch, phenoData = df_0_9, model = "lmer", outcome = "Classic_ETDRS_fields_0_9",
                  covars = c("age","sex"), factors = "sex",  random = ~ (1 | PARENT_SAMPLE_NAME), feature_name = c("X50", "X55")
                  )
res


res <- regression(object = df_m_batch, phenoData = df_0_9, model = "lme",  formula = "Classic_ETDRS_fields_0_9 ~ age + sex + (1 | PARENT_SAMPLE_NAME)", factors = "sex",  feature_name = c("X50", "X55")
                  )
res



res <- regression(object = df_m_batch, phenoData = df_0_9, model = "lmer", formula = "Classic_ETDRS_fields_0_9 ~ age + sex + (1 | PARENT_SAMPLE_NAME)", factors = "sex", feature_name = c("X50", "X55"))
res




library(microbenchmark)
mbm <- microbenchmark(
  res <- regression(object = df_m_batch, phenoData = df_0_9, model = "lme", outcome = "Classic_ETDRS_fields_0_9",
                  covars = c("age","sex"), factors = "sex",  random = ~1 | PARENT_SAMPLE_NAME
                  )
  ,
res2 <- regression(object = df_m_batch, phenoData = df_0_9, model = "lmer", outcome = "Classic_ETDRS_fields_0_9",
                  covars = c("age","sex"), factors = "sex",  random = ~ (1 | PARENT_SAMPLE_NAME)
                  )
  , times = 1)

mbm



all.equal(res, res2)
plot(res$estimate, res2$estimate)


# glmer ####
library(lme4)


dd <- df_0_1
dd


v_formula <- as.formula("Atrophy_0_No_1_Yes ~  age + sex")
random <- ~ (1 | PARENT_SAMPLE_NAME)

v_formula2 <- paste0(deparse(v_formula)," ",  gsub("~", " + ", deparse(random)))
v_formula2

random[-1]



fit <-  glmer(as.formula(v_formula2), data = dd,  family = binomial, nAGQ=25)
fit
class(fit)
str(fit)
res <- as.data.table(summary(fit)$coefficients, keep.rownames = TRUE)
res
res <- res[, list(term = rn, estimate = Estimate, std.error = `Std. Error`,  statistic = `z value`, p.value = `Pr(>|z|)`,  n = fit@devcomp$dims[["n"]])]
res

dd
broom.mixed::tidy(fit)


dd
v_formula <- as.formula("Atrophy_0_No_1_Yes ~  age + sex")


v_formula <- as.formula("Surv(time2, Atrophy_0_No_1_Yes) ~  age + sex")
all.vars(v_formula)


v_formula <- as.formula("Surv(time2, Atrophy_0_No_1_Yes) ~  age + sex + ")
all.vars(v_formula)


fit <-  fit_glmer(data = dd, formula = v_formula, random = ~ (1 | PARENT_SAMPLE_NAME))
fit

lme()
 
res <- regression(object = df_m_batch, phenoData = df_0_1, model = "glmer", outcome = "Atrophy_0_No_1_Yes",
                  covars = c("age","sex"), factors = "sex",  random = ~ (1 | PARENT_SAMPLE_NAME), feature_name = c("X50", "X55"))
res



res <- regression(object = df_m_batch, phenoData = df_0_1, model = "glmer", formula = "Atrophy_0_No_1_Yes ~ sex + age + (1 | PARENT_SAMPLE_NAME)",  factors = "sex",  feature_name = c("X50", "X55"), ncpus = 3)
res



res <- regression(object = df_m_batch, phenoData = dd, model = "glmer", outcome = "Atrophy_0_No_1_Yes",
                  covars = c("age","sex"), factors = "sex", nAGQ = 0,  random = ~ (1 | PARENT_SAMPLE_NAME))
res




mbm <- microbenchmarkCore::microbenchmark(
 res <- regression(object = df_m_batch, phenoData = dd, model = "glmer", outcome = "Atrophy_0_No_1_Yes",
                  covars = c("age","sex"), factors = "sex", nAGQ = 25,  random = ~ (1 | PARENT_SAMPLE_NAME), feature_name = df_m_batch@featureData$featureID[1:50]),
res2 <- regression(object = df_m_batch, phenoData = dd, model = "glmer", outcome = "Atrophy_0_No_1_Yes",
                  covars = c("age","sex"), factors = "sex",  nAGQ = 25, random = ~ (1 | PARENT_SAMPLE_NAME), feature_name = df_m_batch@featureData$featureID[1:50],
                  ncpus = 4
                  )
  , times = 1)

mbm


# 


```







# 3. test code
```{r}

.rs.restartR()

detach("package:metabolomicsR", unload = TRUE)


library(metabolomicsR)


# data_path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/CLSA/data/CLSA_METABOLOMICS_v1_04092021/CLSA COMBINED_NORMDATACOMMON_v1.CSV"
# feature_path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/CLSA/data/CLSA_METABOLOMICS_v1_04092021/CLSA COMBINED_ANNOTATIONTABLEALL_v1.CSV"
# sample_path =  "/n/holylfs05/LABS/liang_lab/Lab/sharedata/CLSA/data/CLSA_METABOLOMICS_v1_04092021/CLSA COMBINED_METADATAALL_v1_de-identified.CSV"

if(0) {
  
  df <- load_data(data_path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/CLSA/data/CLSA_METABOLOMICS_v1_04092021/CLSA COMBINED_RAWDATAALL_v1.CSV", 
                 feature_path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/CLSA/data/CLSA_METABOLOMICS_v1_04092021/CLSA COMBINED_ANNOTATIONTABLEALL_v1.CSV",
                 sample_path =  "/n/holylfs05/LABS/liang_lab/Lab/sharedata/CLSA/data/CLSA_METABOLOMICS_v1_04092021/CLSA COMBINED_METADATAALL_v1_de-identified.CSV",
                 sampleID = "ADM_METABOLON_COM"
                  )

df
  
}



df <- load_excel(path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-17ML+/MEEI-01-17ML+ Data Tables_MTRX Included.xlsx", 
                 data_sheet = 4, 
                 feature_sheet = 2,
                 sample_sheet = 3)

df


# test individual step 
if(0) {
  dd <- column_missing_rate(df)
hist(dd)
df

table(dd >= 0.5)


df <- filter_column_missing_rate(object = df)

df


dd <- row_missing_rate(df@assayData)


df

# data(df) <- df@data[, 1:20]

df


hist(dd)

table(dd > 0.5)

df <- filter_row_missing_rate(object = df)
df



dd <- filter_column_constant(df@assayData[, -1])
dd

df <- filter_column_constant(object = df)
df

df@featureData


}



dd <- df@assayData[, 2:5]
dd[302, 1] <- -5e7

metaboprep::outlier.summary(dd)
metaboprep::feature.outliers(dd)

skimr::skim(metaboprep::sample.outliers(dd))

d <- metaboprep::sample.outliers(dd)
d[d$outlier_count >0, ]



d <- as.data.table(lapply(dd, is_outlier))
d

str(dd)

dd
x <- replace_outlier(dd)
x


x <- replace_outlier(df)
x

d <- outlier_rate(x)

hist(d)

hist(x)



which(is_outlier(dd$X50))

hist(dd$X50)

# normalize 

df <- QC_pipeline(df, impute_method = NULL)
df


df_QC_norm <- QCmatrix_norm(df)

df_batch_norm <- batch_norm(df)



df_QC <- QC_pipeline(df_QC_norm, impute_method = NULL)
df_QC


df_QC <- QC_pipeline(df_batch_norm, impute_method = NULL)
df_QC 

df_QC <- impute(df_QC)

# check data
if(0) {
  
  
  df_factor <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/order/conversionFactors_M4toM7_FinalList_updated.csv")
  
  df_feature <- df@featureData
  
  # batch norm
  df_metabolon <- readxl::read_excel("MEEI-01-20PHML+/MEEI-02-20PHMISC_MERGED_CDT.XLSX", sheet = 6)
  
  
  # qc matrix norm
df_metabolon <- readxl::read_excel("MEEI-01-20PHML+/MEEI-02-20PHMISC_MERGED_CDT.XLSX", sheet = 9)



df_metabolon[, -1] <- lapply(df_metabolon[,-1], as.numeric)

setDT(df_metabolon)
df_metabolon[, 1:10]
df_metabolon  <- f_rename_x(df_metabolon)

  df_check <- merge(df_QC@assayData, df_metabolon, by = "PARENT_SAMPLE_NAME")
 df_check <- merge(df@assayData, df_metabolon, by = "PARENT_SAMPLE_NAME")

  
  df_check[, 1:10]
  df_check[, plot(X50.x, X50.y)]
  
  0.1663941
  
  dd <- df_check[, list(PARENT_SAMPLE_NAME, X50.x_raw = X50.x, X50.x = 0.1663941 * X50.x, X50.y)]
  dd[, ratio := X50.x / X50.y]
  dd [, plot(X50.x, X50.y)]

  
  dd <- merge(dd, df@sampleData,  by = "PARENT_SAMPLE_NAME")
  
  dd <- merge(dd,df_QC@sampleData,  by = "PARENT_SAMPLE_NAME")
  dd[, table(NEG)]

  df
  
  dd <- df_check[, list(PARENT_SAMPLE_NAME, X100008929.x_raw = X100008929.x, X100008929.x = 0.9739392* X100008929.x,  X100008929.y)]
  
  
  
  dd[, ratio := X100008929.x / X100008929.y]
  dd [, plot(X100008929.x, X100008929.y)]

  df
  dd <- merge(df@assayData[, list(PARENT_SAMPLE_NAME, X100008929)], dd, by = "PARENT_SAMPLE_NAME", all.x = TRUE)
  
  dd <- merge(dd, df@sampleData, by = "PARENT_SAMPLE_NAME", all.x = TRUE)
  
  
  dd_QC <-  dd[str_detect(PARENT_SAMPLE_NAME, "MTRX"), ]
  dd_QC
  dd_QC[, table(NEG)]
  psych::describeBy(dd_QC$X100008929, dd_QC$NEG)
  
  dd[str_detect(PARENT_SAMPLE_NAME, "MTRX"), by(X100008929, NEG, median, na.rm = TRUE)]
  
  
  
  
  }


# PCA

df_PCA <- PCA(df_QC)

p <- plot_PCA(df_PCA)
p





# test PCA
if(0) {
  
  # pcaMethods::pca
  df_PCA <- pcaMethods::pca(df_QC@assayData[, -1], completeObs = TRUE, nPcs = 10)
df_PCA
str(df_PCA)
df_PCA_ <- merge(cbind(df_QC@assayData[, 1], df_PCA@scores), df_QC@sampleData, by = "PARENT_SAMPLE_NAME")



# stats
df_feature_stat <- metaboprep::feature.sum.stats(df_QC@assayData[, -1])
w = which(df_feature_stat$table$independent_features_binary == 1)
w
indf = df_feature_stat$table[w,1]
indf 

df_PCA = metaboprep::pc.and.outliers(metabolitedata =  df_QC@assayData[, -1], indfeature_names = indf )
df_PCA
df_PCA_ <- merge(cbind(df_QC@assayData[, 1], df_PCA$pcs), df_QC@sampleData, by = "PARENT_SAMPLE_NAME")


# prcomp
df_PCA <- prcomp(df_QC@assayData[, -1], center = TRUE, scale = TRUE, rank. = 20)
str(df_PCA)

X <- as.matrix(df_QC@assayData[, -1])


df_PCA <- prcomp(X, center = TRUE, scale = TRUE, rank. = 20)
str(df_PCA)

str(summary(df_PCA))
summary(df_PCA)
summary(df_PCA)[[6]][2, ][1:10]

df_PCA$x[1:10, 1:10]

df_PCA$x[, 1:10]

df_PCA_prcomp <- df_PCA

df_PCA$rotation[1:10, 1:10]
plot(df_PCA$rotation[, 1], df_PCA$rotation[, 2])


df_PCA_ <- merge(cbind(df_QC@assayData[, 1], df_PCA$x[, 1:10]), df_QC@sampleData, by = "PARENT_SAMPLE_NAME")



# 






# PCA
X <- as.matrix(df_QC@assayData[, -1])
X




df_PCA <- PCA(df_QC, nPCs = 10)
df_PCA$Variances


setDT(df_PCA_)
df_PCA_[, plot(PC1, PC2)]

df_PCA_[, QCsample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX4"), 1, 0)]

ggplot(df_PCA_, aes(PC1, PC2)) +
  geom_point(aes(color = factor(NEG), shape = factor(QCsample)), size = 0.8) +
  scale_shape_manual(values = c(1, 8))

ggplot(df_PCA_, aes(PC1, PC2)) +
  geom_point(aes(color = factor(NEG), shape = factor(QCsample)), size = 0.8) +
  scale_shape_manual(values = c(1, 8)) +
  facet_grid(~QCsample)






df_sample_clean <- fread("/n/holylfs05/LABS/liang_lab/Lab/xikun/AMD_metabolites/data/AMD_biomarker_data/df_plasma_sample.txt")
df_sample_clean


df_plot <- merge(df_plot, df_sample_clean[, list(PARENT_SAMPLE_NAME, ID_year,  study, AMD_status)], by = "PARENT_SAMPLE_NAME", sort = FALSE, all = TRUE, suffixes = c("", "_"))


ggplot(df_plot, aes(X1, X2)) +
  geom_point(aes(color = factor(AMD_status == "Control"))) 


ggplot(df_plot, aes(X1, X2)) +
  geom_point(aes(color = factor(study)))



}


# test UMAP

if(0) {
  
  # load your omic data here as mydata


library(umap)

df_2017_QC_norm_PCA

dat <- df_2017_QC_norm_PCA


umap <- umap::umap(dat@assayData[, -1])

df <- data.frame(x = umap$layout[,1],
                 y = umap$layout[,2],
                 Species = dat@sampleData$NEG)
ggplot(df, aes(x, y, colour = Species)) +
  geom_point()



library(Rtsne)

dat <- iris

tsne <- Rtsne::Rtsne(dat@assayData[, -1])

df <- data.frame(x = tsne$Y[,1],
                 y = tsne$Y[,2],
                 Species =dat@sampleData$NEG)

ggplot(df, aes(x, y, colour = Species)) +
  geom_point()





library(M3C)

dat

UMAP <- M3C::umap(t(dat@sampleData[, paste0("PC", 1:10), with = FALSE]))
UMAP$data
df_plot <- cbind(dat@assayData[, 1], UMAP$data)



UMAP <- M3C::umap(t(dat@assayData[,-1]))
UMAP$data
df_plot <- cbind(dat@assayData[, 1], UMAP$data)



UMAP <-  M3C::pca(t(dat@assayData[,-1]))
UMAP
UMAP$data
df_plot <- cbind(dat@assayData[, 1], X1 = UMAP$data$PC1, X2 = UMAP$data$PC2)



UMAP <- M3C::tsne(t(dat@assayData[,-1]))
UMAP
UMAP$data
df_plot <- cbind(dat@assayData[, 1], UMAP$data)


df_plot <- merge(df_plot, dat@sampleData, by = "PARENT_SAMPLE_NAME")

df_plot[, QCsample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX4"), 1, 0)]

ggplot(df_plot, aes(X1, X2)) +
  geom_point(aes(color = factor(NEG), shape = factor(QCsample))) +
  scale_shape_manual(values = c(1, 8))



}


# conversion factor


df_factor <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/order/conversionFactors_M4toM7_FinalList_updated.csv")
df_factor

df_factor[, length(unique(COMP_ID))]
df_factor[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_factor
setnames(df_factor, "CF", "conversion_factor_value")
df_factor[, table(duplicated(conversion_factor_ID))]
df_factor

df_feature <- df_QC@featureData
df_feature[, conversion_factor_ID := paste0(COMP_ID, "_", LIB_ID)]
df_QC@featureData <- df_feature
df_QC

df_rescale <- rescale(df_QC, conversion_factor_data = df_factor)



df_PCA <- PCA(df_rescale)
p <- plot_PCA(df_PCA)
p



# check data
if(0) {
  f_rename_x <- function(data) {
  names(data)[-1] <- paste0("X", names(data)[-1])
  return(data)
}

  
  df_factor <- fread("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/order/conversionFactors_M4toM7_FinalList_updated.csv")
  
  # batch norm
  df_metabolon <- readxl::read_excel("MEEI-01-20PHML+/MEEI-02-20PHMISC_MERGED_CDT.XLSX", sheet = 6)
  
  
  # qc matrix norm
df_metabolon <- readxl::read_excel("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-20PHML+/MEEI-02-20PHMISC_MERGED_CDT.XLSX", sheet = 9)

df_metabolon[, -1] <- lapply(df_metabolon[,-1], as.numeric)

setDT(df_metabolon)
df_metabolon[, 1:10]
df_metabolon  <- f_rename_x(df_metabolon)

  df_check <- merge(df_rescale@assayData, df_metabolon, by = "PARENT_SAMPLE_NAME")

  
  df_check[, 1:10]
  df_check[, plot(X50.x, X50.y)]
  
  0.1663941
  
  dd <- df_check[, list(PARENT_SAMPLE_NAME, X50.x, X50.y)]
  dd[, ratio := X50.x / X50.y]
  dd [, plot(X50.x, X50.y)]

  dd[, hist(ratio)]
  
  
  
  dd <- merge(dd,df_QC@sampleData,  by = "PARENT_SAMPLE_NAME")
  dd[, table(NEG)]

  dd
  
  dd <- df_check[, list(PARENT_SAMPLE_NAME, X100008929.x, X100008929.y)]
  
  dd[, ratio := X100008929.x / X100008929.y]
  dd [, plot(X100008929.x, X100008929.y)]

  dd[, hist(ratio)]
  
  df
  dd <- merge(df@assayData[, list(PARENT_SAMPLE_NAME, X100008929)], dd, by = "PARENT_SAMPLE_NAME", all.x = TRUE)
  
  dd <- merge(dd, df@sampleData, by = "PARENT_SAMPLE_NAME", all.x = TRUE)
  
  
  dd_QC <-  dd[str_detect(PARENT_SAMPLE_NAME, "MTRX"), ]
  dd_QC
  dd_QC[, table(NEG)]
  psych::describeBy(dd_QC$X100008929, dd_QC$NEG)
  
  dd[str_detect(PARENT_SAMPLE_NAME, "MTRX"), by(X100008929, NEG, median, na.rm = TRUE)]
  }

# 




if(0) {
  dd
d <- dd@miscData[[1]]
d
d <- as.data.table(d)
d <- t(d)
d



str(d)


d_m <- Reduce(function(...) merge(...,  by = "PARENT_SAMPLE_NAME"), list(df@sampleData,
df@assayData[,  list(PARENT_SAMPLE_NAME, X50)],
dd@assayData[,  list(PARENT_SAMPLE_NAME, X50)]))


d_m_ <- d_m[str_detect(PARENT_SAMPLE_NAME, "MTRX")]
d_m[, ratio := X50.x / X50.y]
by(d_m_$X50.x, d_m_$`POS LATE`, median, na.rm = TRUE)

d_m[, table(`POS LATE`, ratio)]


d <- df@featureData

dd <- QCmatrix_norm(data = df@data,  metabolite_annotation = df@feature, sample_annotation = df@sample, test = TRUE) 

}



names(dd@miscData)
length()



```






# 4. geneticToolBox
```{r}

.rs.restartR()
remove.packages("geneticToolBox")

.rs.restartR()

devtools::document()
devtools::install()
library(geneticToolBox)

devtools::check()


# check package name 
available::available("metabolomicsR")
available::available("geneticToolBox",  browse= FALSE)






#' read gwas summary statistics.


fread_gwas <- function(file = NULL,
                       SNP = "SNP",
                       CHR = "CHR",
                       BP = "BP",
                       A1 = "A1",
                       A2 = "A2",
                       BETA = "BETA",
                       SE = "SE",
                       P = "P",
                       extract_SNP = NULL,
                       keep_column = c("SNP","CHR","BP" , "A1", "A2", "BETA", "SE", "P"),
                       trait = "NA",
                       save_to = NULL, 
                       verbose = TRUE) {

  
  df <- fread(file)

  if(verbose) {
    cat("*** original data *** \n")
    print(head(df))
  }
 
  
  v_name <- c(SNP, CHR, BP, A1, A2, BETA, SE, P)
  v_name_format <- c("SNP","CHR","BP" , "A1", "A2", "BETA", "SE", "P")
  setnames(df, v_name[which(!is.na(v_name))], v_name_format[which(!is.na(v_name))])

  

  if(! is.null(extract_SNP)) {
    df <- df[SNP %chin% extract_SNP, ]
  } 

  df[, A1 := toupper(A1)]
  df[, A2 := toupper(A2)]

  if(all(keep_column %in% names(df))) {
    df <- df[, keep_column, with = FALSE]
  } else stop(paste0("Column: ", paste0(keep_colum[!keep_column %in% names(df)], collapse = ", ")), " not in data.", call. = FALSE)
  
  tryCatch(
    if(!is.null(save_to)) {
    if(dir.exists(save_to)) {
      warning(paste0(save_to, " is a folder."))
      save_to <- paste0(save_to,"/", trait, ".txt.gz")
      if(file.exists(save_to)) warning(paste0(save_to, " exist.")) 
    } 
    fwrite(df, save_to , sep = "\t")
  },
   error = function(e) {
      cat(paste0("Failed to save file: ", e), "\n")
    })
  
  
  if(verbose) {
    cat("\n*** Final data *** \n")
    print(head(df))
    print(skimr::skim(df))
  }
  
  return(df)
}


# df <- fread_gwas(file = "/n/holyscratch01/liang_lab/xikun/working/out/mGWAS/meta/X100000007/plasma_X100000007_meta.gz")

df <- fread_gwas(file = "/n/holyscratch01/liang_lab/xikun/working/out/mGWAS/meta_old/X100000007/urine_X100000007_out_1.tbl", SNP = "MarkerName", CHR = "Chromosome", BP = "Position", A1 = "Allele1", A2 = "Allele2", BETA = "Effect", SE = "StdErr", P = "P-value")




df <- fread_gwas(file = "/n/holyscratch01/liang_lab/xikun/working/out/mGWAS/meta_old/X100000007/urine_X100000007_out_1.tbl", SNP = "MarkerName", CHR = NA, BP = NA, A1 = "Allele1", A2 = "Allele2", BETA = "Effect", SE = "StdErr", P = "P-value", keep_column = c("SNP", "A1", "A2", "BETA", "SE", "P"))



df


```



# test script
```{r}


# read 2016 data. 


f_rename_x <- function(data) {
  names(data)[-1] <- paste0("X", names(data)[-1])
  return(data)
}

df_2016_annotation <- readxl::read_excel("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-16ML_CO/MEEI-01-16ML Data Tables_MTRX Included.xlsx", sheet = 2)
setDT(df_2016_annotation)
df_2016_annotation
str(df_2016_annotation)

df_2016_annotation[, metabolite_ID:= paste0("X", CHEM_ID)]

df_sample_2016 <- readxl::read_excel("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-16ML_CO/MEEI-01-16ML Data Tables_MTRX Included.xlsx", sheet = 3)
setDT(df_sample_2016)


df_2016 <- readxl::read_excel("/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-16ML_CO/MEEI-01-16ML Data Tables_MTRX Included.xlsx", sheet = 4)
setDT(df_2016)
df_2016 <- f_rename_x(df_2016)


df_2016[, 1:10]
df_sample_2016
df_2016_annotation

# source("~/pkg/metabolomicsR/R/normalization.R")

df_2016_qcNorm <- metabolomicsR::QCmatrix_norm(data = df_2016, 
                                  metabolite_annotation = df_2016_annotation, 
                                  sample_annotation = df_sample_2016)


df_2016_batchNorm <- metabolomicsR::batch_norm(data = df_2016, 
                                  metabolite_annotation = df_2016_annotation, 
                                  sample_annotation = df_sample_2016)



path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-16ML_CO/MEEI-01-16ML Data Tables_MTRX Included.xlsx"
data_sheet = 4
feature_sheet = 2
sample_sheet = 3
sample_ID ="PARENT_SAMPLE_NAME"
feature_ID = "CHEM_ID"
 

detach("package:metabolomicsR", unload = TRUE)
library(metabolomicsR)



df <- load_excel(path = "/n/holylfs05/LABS/liang_lab/Lab/sharedata/AMD_boston_2021/portal_data/Metabolon/MEEI-01-16ML_CO/MEEI-01-16ML Data Tables_MTRX Included.xlsx", 
                 data_sheet = 4, 
                 feature_sheet = 2,
                 sample_sheet = 3)

df







```



# other ref package
```{r}

library(Seurat)

InstallData("bmcite")
bm <- LoadData(ds = "bmcite")




# 


```



# back function

```{r}



 # as a separate function, check file
  if (! sample_ID %in% names(data)) stop(paste0(sample_ID, " does not exist in data file", call. = FALSE))
  if (! sample_ID %in% names(sample)) stop(paste0(sample_ID, " does not exist in sample file", call. = FALSE))

  if (! feature_ID %in% names(feature)) stop(paste0(feature_ID, " does not exist in feature file", call. = FALSE))

  feature_IDs <- setdiff(names(data), sample_ID)
  sample_IDs <- unlist(data[,sample_ID, with = FALSE])

  if(! all(feature_IDs %in%  unlist(feature[, feature_ID, with = FALSE]))) {
    stop(paste0("\n Some feature IDs are missing.\n"), call. = FALSE)
  }

  if(! all(sample_IDs %in%  unlist(sample[, sample_ID, with = FALSE]))) {
    stop(paste0("\n Some sample IDs are missing.\n"), call. = FALSE)
  }

  if("feature_ID" %in% names(feature)) {
    warnings(paste0("feature_ID column already exists in the feature annotation file. Will be overwritten!"))
  }

  # test feature ID, if a numeric, add X (provided from Metabolon file)
  if(!is.na(as.integer(feature_IDs[1]))) {
    cat(paste0("\n Add X to feature IDs.\n"), file = stderr())
    feature[, feature_ID := paste0("X", get(feature_ID))]
    setnames(data, feature_IDs, paste0("X", feature_IDs))
  } else {
    feature[, feature_ID := get(feature_ID)]
  }

  feature <- feature[feature_ID %in% names(data)]
  sample <- sample[get(sample_ID) %in% unlist(data[, sample_ID, with = FALSE])]

  
  
#' normalization data by the median value of QC samples in each batch
#'
#' QCmatrix-normalization data from Metabolon.
#'
#' @param data A data table for metabolite measurements.
#' @param metabolite_annotation annotation table for metabolites (required column: metabolite_ID, add "X" to CHEM_ID)
#' @param sample_annotation annotation table for metabolites (required column: PARENT_SAMPLE_NAME, . )
#' @param test test the function for the first 20 columns
#' @importFrom utils txtProgressBar setTxtProgressBar
#' @import data.table
#' @examples
#' \dontrun{
#' d <- QCmatrix_norm(data = df_value,  metabolite_annotation = df_metabolite_annotation, sample_annotation = df_sample_annotation)
#' }
#' @export
#'
QCmatrix_norm <- function(data = NULL,  metabolite_annotation = NULL, sample_annotation = NULL, test = FALSE) {

  data <- as.data.table(data)
  InputData <- copy(data)
  OutputData <- copy(data)

  cat(paste0("\n Number of samples ", NROW(data),  "\n"))
  cat(paste0("\n Number of metabolites ", NCOL(data)-1,  "\n"))

  if(NROW(data) != NROW(sample_annotation)) {
    warnings(paste0("\n To check the number of samples \n"))
  }

  if(NCOL(data) != (NROW(metabolite_annotation) + 1)) {
    warnings(paste0("\n To check the number of metabolites \n"))
  }


  if(! all(data$PARENT_SAMPLE_NAME %in% sample_annotation$PARENT_SAMPLE_NAME)) {
    warnings(paste0("\n To check sample IDs \n"))
  }


  if(! all(names(data)[-1] %in% metabolite_annotation$metabolite_ID)) {
    warnings(paste0("\n To check metabolite IDs \n"))
  }

  v_n_col <- dim(InputData)[2]
  v_n_col

  if(test) {
    v_n_col <- 20
  }

  pb <- txtProgressBar(min = 0, max = v_n_col, style = 3, file = stderr())

  for(j in 2L:v_n_col) {

    setTxtProgressBar(pb = pb, value = j)
    v_metab <- names(InputData)[j]

    v_platform <- metabolite_annotation[metabolite_ID == v_metab, PLATFORM] # metabolite platform
    v_platform <- toupper(v_platform)

    df_platform <- sample_annotation[, c("PARENT_SAMPLE_NAME", v_platform), with = FALSE] # batch for the platform

    for (id_platform in unique(unlist(df_platform[, 2]))) {

      df_sample_each <- df_platform[get(v_platform) == id_platform, PARENT_SAMPLE_NAME]

      InputData_each <- InputData[InputData$PARENT_SAMPLE_NAME %in% df_sample_each, c(1,j), with = FALSE]

      Index_each <- which(InputData$PARENT_SAMPLE_NAME %in% df_sample_each)
      Index_each

      QCIndex <- which(grepl("MTRX", InputData_each$PARENT_SAMPLE_NAME))
      SampleIndex <- which(!grepl("MTRX", InputData_each$PARENT_SAMPLE_NAME))


      missing_rate <- function(x) sum(is.na(x)) / length(x)

      v_missing_rate <- missing_rate(unlist(InputData_each[QCIndex, 2]))
      v_missing_rate

      if(v_missing_rate > 0.5) {
        set(OutputData, Index_each, j, NA)
        next
      }

      v_median <- median(unlist(InputData_each[QCIndex, 2]), na.rm = TRUE)
      v_median

      # v_min <- min(InputData_each[!QCIndex, 2], na.rm = TRUE)/v_median # non-missing arguments to min; returning Inf
      # v_min

      # if(impute == "min") {
      #   index_missing <- which(InputData$PARENT_SAMPLE_NAME %in% df_sample_each & !grepl("MTRX", InputData$PARENT_SAMPLE_NAME) & is.na(InputData[,get(v_metab)]))
      #   set(OutputData, index_missing, j, v_min)
      # }

      # also norm QC sample
      index_no_missing <- which(InputData$PARENT_SAMPLE_NAME %in% df_sample_each  & !is.na(InputData[,get(v_metab)]))
      set(OutputData, index_no_missing, j, unlist(InputData[index_no_missing, j , with = FALSE])/v_median)
    }
  }
  close(con = pb)

  return(OutputData)
}




#' normalization data by the median value in each batch
#'
#' Batch-normalization data from Metabolon.
#'
#' @param data A data table for metabolite measurements.
#' @param metabolite_annotation annotation table for metabolites (required column: metabolite_ID, add "X" to CHEM_ID)
#' @param sample_annotation annotation table for metabolites (required column: PARENT_SAMPLE_NAME, . )
#' @param test test the function for the first 20 columns
#' @import data.table
#' @export
#' @examples
#' \dontrun{
#' d <- batch_norm(data = df_value,  metabolite_annotation = df_metabolite_annotation, sample_annotation = df_sample_annotation)
#' }
#'
batch_norm <- function(data = NULL,  metabolite_annotation = NULL, sample_annotation = NULL, test = FALSE) {

  InputData <- copy(data)
  OutputData <- copy(data)


  cat(paste0("\n Number of samples ", NROW(data),  "\n"))
  cat(paste0("\n Number of metabolites ", NCOL(data) -1,  "\n"))

  if(NROW(data) != NROW(sample_annotation)) {
    warnings(paste0("\n To check the number of samples \n"))
  }

  if(NCOL(data) != (NROW(metabolite_annotation) + 1)) {
    warnings(paste0("\n To check the number of metabolites \n"))
  }


  if(! all(data$PARENT_SAMPLE_NAME %in% sample_annotation$PARENT_SAMPLE_NAME)) {
    warnings(paste0("\n To check sample IDs \n"))
  }


  if(! all(names(data)[-1] %in% metabolite_annotation$metabolite_ID)) {
    warnings(paste0("\n To check metabolite IDs \n"))
  }


  v_n_col <- dim(InputData)[2]
  v_n_col

  if(test) {
    v_n_col <- 20
  }


  pb <- txtProgressBar(min = 0, max = v_n_col, style = 3, file = stderr())
  for(j in 2L:v_n_col) {
    setTxtProgressBar(pb = pb, value = j)
    v_metab <- names(InputData)[j]

    v_platform <- metabolite_annotation[metabolite_ID == v_metab, PLATFORM] # metabolite platform
    v_platform <- toupper(v_platform)

    df_platform <- sample_annotation[, c("PARENT_SAMPLE_NAME", v_platform), with = FALSE] # batch for the platform

    for (id_platform in unique(unlist(df_platform[, 2]))) {

      df_sample_each <- df_platform[get(v_platform) == id_platform, PARENT_SAMPLE_NAME]

      InputData_each <- InputData[InputData$PARENT_SAMPLE_NAME %in% df_sample_each, c(1,j), with = FALSE]

      Index_each <- which(InputData$PARENT_SAMPLE_NAME %in% df_sample_each)
      Index_each

      SampleIndex <- which(!grepl("MTRX", InputData_each$PARENT_SAMPLE_NAME))


      v_median <- median(unlist(InputData_each[SampleIndex, 2]), na.rm = TRUE) ## this is the sample median value rather than qc sample
      v_median


      index_no_missing <- which(InputData$PARENT_SAMPLE_NAME %in% df_sample_each  & !is.na(InputData[,get(v_metab)]))
      set(OutputData, index_no_missing, j, unlist(InputData[index_no_missing, j , with = FALSE])/v_median)
    }
  }
  close(con = pb)

  return(OutputData)
}


#' column missing rate
#'
#' calculate column missing rate, metabolite missingness
#'
#' @param data A data frame or data table.
#' @export
#' @examples
#' \dontrun{
#' d <- column_missing_rate(data = df)
#'
#' # if skip the first column (eg. ID)
#' d <- column_missing_rate(data = df[, -1])
#' }
#'
column_missing_rate <- function(data = NULL) {
  r <- apply(data, 2, function(x) sum(is.na(x)) / length(x))
  names(r) <- names(data)
  return(r)
}



#' row missing rate
#'
#' calculate row missing rate, sample missingness
#'
#' @param data A data frame or data table.
#' @export
#' @examples
#' \dontrun{
#' res <- row_missing_rate(data = df)
#'
#' # if skip the first column (eg. ID)
#'
#' d <- row_missing_rate(data = df[, -1])
#' }
#'
row_missing_rate <- function(data = NULL) {
  r <- apply(data, 1, function(x) sum(is.na(x)) / length(x))
  names(r) <- rownames(data)
  return(r)
}




#' filter rows at a missing rate
#'
#' remove rows at a specific missing rate threshold, default threshold (1) when all missing.
#'
#' @param data A data frame or data table.
#' @param threshold missing rate threshold, default is 1. Other values: 0.8 or 0.5.
#' @param verbose print log information
#' @export
#' @examples
#' \dontrun{
#' res <- filter_row_missing_rate(data = df)
#'
#' # if skip the first column (eg. ID)
#' d <- filter_row_missing_rate(data = df[, -1])
#' }
#'
filter_row_missing_rate <- function(data = NULL, threshold = 1, verbose = TRUE) {
  r <- row_missing_rate(data)

  if(verbose) {
    cat(paste0("\n Number of rows with a missing rate >= ", threshold, " : n= ", sum(r >= threshold), "\n"))
  }

  data_ <- data[r < threshold, ]
  return(data_)
}




#' filter columns at a missing rate
#'
#' remove columns at a specific missing rate threshold, default threshold (1) when all missing.
#'
#' @param data A data frame or data table.
#' @param threshold missing rate threshold, default is 1. Other values: 0.8 or 0.5.
#' @param verbose print log information
#' @export
#' @examples
#' \dontrun{
#' d <- filter_column_missing_rate(data = df)
#'
#' # if skip the first column (eg. ID)
#' d <- filter_column_missing_rate(data = df[, -1])
#' }
#'
filter_column_missing_rate <- function(data = NULL, threshold = 1, verbose = TRUE) {

  data <- as.data.table(data)
  r <- column_missing_rate(data)

  if(verbose) {
    cat(paste0("\n Number of columns with a missing rate >= ", threshold, " : n= ", sum(r >= threshold),  "\n"))
  }

  r <- r[r < threshold]
  data_ <- data[, names(r), with = FALSE]
  return(data_)
}




#' filter columns if values are constant
#'
#' remove columns if values are constant.
#'
#' @param data A data frame or data table.
#' @param verbose print log information
#' @export
#' @examples
#' \dontrun{
#' res <- filter_column_missing_rate(data = df)
#'
#' # if skip the first column (eg. ID)
#' d <- filter_column_missing_rate(data = df[, -1])
#' }
#'
filter_column_constant <- function(data = NULL, verbose = TRUE) {
  data <- as.data.table(data)
  r <- apply(data, 2, function(x) sd(x, na.rm = TRUE))

  if(verbose) {
    cat(paste0("\nConstant columns n = ", sum(r == 0), "\n"))
  }

  r <- r[r != 0]
  data_ <- data[, names(r), with = FALSE]
  return(data_)
}


```



```{r}


df_sample <- merge(df_m_PCA@sampleData, df_sample_clean[, list(PARENT_SAMPLE_NAME, ID_year,  study, AMD_status)], by = "PARENT_SAMPLE_NAME", sort = FALSE, all = TRUE, suffixes = c("", "_"))
df_sample


df_sample <- merge(df_order_merge[, list(PARENT_SAMPLE_NAME)], df_sample, sort = FALSE, by = "PARENT_SAMPLE_NAME", suffixes = c("", "_"))

df_sample[, QC_sample := ifelse(str_detect(PARENT_SAMPLE_NAME, "MTRX"),1, 0)]
df_sample[, ID := 1: NROW(df_sample)]
df_sample

# df_m@sampleData <- df_sample
df_m_PCA@sampleData <- df_sample



p <- plot_PCA(df_m_PCA, color = "study")
p
p <- plot_PCA(df_m_PCA, color = "QC_sample")
p


ggplot(df_m_PCA@sampleData, aes(PC1, PC2)) +
  geom_point(aes(color = factor(NEG), shape = factor(QC_sample))) +
  scale_shape_manual(values = c(1,8)) +
  facet_wrap(~study)


ggplot(df_m_PCA@sampleData[study == "Boston"], aes(PC1, PC2)) +
  geom_point(aes(color = factor(NEG), shape = factor(QC_sample))) +
  scale_shape_manual(values = c(1,8))


ggplot(df_m_PCA@sampleData[study == "Portugal"], aes(PC1, PC2)) +
  geom_point(aes(color = factor(NEG), shape = factor(QC_sample))) +
  scale_shape_manual(values = c(1,8))



# for metabolite 

df <- merge(df_m_PCA@sampleData, df_m_PCA@assayData, by = "PARENT_SAMPLE_NAME", sort = FALSE, all = TRUE, suffixes = c("", "_"))



ggplot(data = df) +
  geom_point(aes(ID, X563, color = NEG, shape = factor(QC_sample))) +
  scale_shape_manual(values = c(1,8)) 



ggplot(data = df) +
  geom_point(aes(ID, X338, color = NEG, shape = factor(QC_sample))) +
  scale_shape_manual(values = c(1,8))  +
   facet_grid(~study)




df_select <- df_m_PCA@assayData[, 1:10]
df_select <- reshape2::melt(df_select, id = "PARENT_SAMPLE_NAME")
df_select 

df <- merge(df_m_PCA@sampleData, df_select, by = "PARENT_SAMPLE_NAME", sort = FALSE, all = TRUE, suffixes = c("", "_"))



ggplot(data = df) +
  geom_point(aes(ID, X563, color = NEG, shape = factor(QC_sample))) +
  scale_shape_manual(values = c(1,8)) 


ggplot(data = df) +
  geom_point(aes(ID, value, color = NEG, shape = factor(QC_sample))) +
  facet_wrap(~variable, scales = "free_y") +
  scale_shape_manual(values = c(1,8)) 


ggplot(data = df) +
  geom_point(aes(ID, value, color = factor(QC_sample), shape = factor(NEG))) +
  facet_wrap(~variable, scales = "free_y") 


# random select 30

df_select <- df_m_PCA@assayData[, c(1, sample(2:NCOL(df_m_PCA@assayData), 30, replace = FALSE)), with = FALSE]
names(df_select)
df_select <- reshape2::melt(df_select, id = "PARENT_SAMPLE_NAME")

df <- merge(df_m_PCA@sampleData, df_select, by = "PARENT_SAMPLE_NAME", sort = FALSE, all = TRUE, suffixes = c("", "_"))

df$QC_sample <- factor(df$QC_sample, levels = c("1", "0"))
# 

p <- plot_injection_order(df_m_PCA, color = "QC_sample")
p

p <- plot_injection_order(df_m_PCA, color = "QC_sample", feature_name = "X563")
p




## UMAP

plot_UMAP(df_2020_QC_norm_PCA)


df_2017_QC_norm_PCA@sampleData$QCSample <- ifelse(str_detect(df_2017_QC_norm_PCA@sampleData$PARENT_SAMPLE_NAME, "MTRX"), 1, 0)
names(df_2017_QC_norm_PCA@sampleData)




p<- plot_tsne(df_2017_QC_norm_PCA, color = "NEG", shape = "QCSample")
p


if(0) {
  
  object <- df_2017

  dd <- nearestQC_norm(df_2016)
  
  library(profvis)

  p <- profvis({
 
    dd <- nearestQC_norm(df_2017, test = 30)
    
})

  p
  
  print(p)

  library(microbenchmark)
  
mbm <- microbenchmark({
     dd <- nearestQC_norm(df_2017, test = TRUE)
  }, times = 1)

mbm


QCmatrix_norm_v2 <- QCmatrix_norm


mbm <- microbenchmark(
    d1 <- nearestQC_norm(df_2017, test = TRUE),
     d2 <- nearestQC_norm_v2(df_2017, test = TRUE),
  d3 <- QCmatrix_norm(df_2017, test = TRUE),
  d32 <- QCmatrix_norm_v2(df_2017, test = TRUE),
  d4 <- batch_norm(df_2017, test = TRUE),
  d42 <- batch_norm_v2(df_2017, test = TRUE)
  , times = 3)

mbm


plot(d1@assayData$X50, d2@assayData$X50)
plot(d3@assayData$X50, d32@assayData$X50)

plot(d3@assayData$X55, d32@assayData$X55)

plot(d4@assayData$X55, d42@assayData$X55)


plot(d1@assayData$X50, d24@assayData$X50)

plot(d1@assayData$X55, d24@assayData$X55)
plot(d1@assayData$X93, d24@assayData$X93)


plot(d1@assayData$X50, d22@assayData$X50)

plot(d1@assayData$X50, d3@assayData$X50)
plot(d1@assayData$X50, d4@assayData$X50)


plot(d2@assayData$X50, d3@assayData$X50)
plot(d2@assayData$X50, d4@assayData$X50)


plot(d1@assayData$X55, d2@assayData$X55)
plot(d1@assayData$X50, d3@assayData$X50)
plot(d1@assayData$X50, d4@assayData$X50)


plot(d1@assayData$X93, d2@assayData$X93)
plot(d1@assayData$X93, d22@assayData$X93)
plot(d1@assayData$X93, d3@assayData$X93)
plot(d2@assayData$X93, d3@assayData$X93)



r <- correlation(d1, d2)
skimr::skim(r)

plot(d1@assayData$X100008974, d2@assayData$X100008974)



object <- df_2017
n_nearest_QCsample= 3
feature_platform = "PLATFORM"
QC_ID_pattern = "MTRX"
test = FALSE
verbose = TRUE




mbm <- microbenchmark(
     unlist(InputData_each[QCIndex, 2]),
  InputData_each[QCIndex, get(v_metab)]
  , times = 100)

mbm


mbm <- microbenchmark(
   InputData[Index_each, c(1,j), with = FALSE],
InputData[Index_each, .SD,.SDcols=c(1, j)]
, times = 200)


mbm <- microbenchmark(
  set(OutputData, i, j, unlist(object@assayData[i, j , with = FALSE])/v_median),
OutputData[i, (v_metab):= unlist(object@assayData[i, j , with = FALSE])/v_median]
, times = 200)

mbm



# 5.622157

}




```

